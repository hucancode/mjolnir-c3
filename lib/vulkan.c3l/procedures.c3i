//
// Vulkan wrapper generated from "https://raw.githubusercontent.com/KhronosGroup/Vulkan-Headers/master/include/vulkan/vulkan_core.h"
//
module vk;

import std::core::cinterop;

// Loader Procedure Types
def ProcAllocationFunction = fn void*(void* pUserData, usz size, usz alignment, SystemAllocationScope allocationScope);
def ProcCreateInstance = fn Result(InstanceCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Instance* pInstance);
def ProcDebugUtilsMessengerCallbackEXT = fn uint(DebugUtilsMessageSeverityFlagsEXT messageSeverity, DebugUtilsMessageTypeFlagsEXT messageTypes, DebugUtilsMessengerCallbackDataEXT* pCallbackData, void* pUserData);
def ProcDeviceMemoryReportCallbackEXT = fn void(DeviceMemoryReportCallbackDataEXT* pCallbackData, void* pUserData);
def ProcEnumerateInstanceExtensionProperties = fn Result(ZString pLayerName, uint* pPropertyCount, ExtensionProperties* pProperties);
def ProcEnumerateInstanceLayerProperties = fn Result(uint* pPropertyCount, LayerProperties* pProperties);
def ProcEnumerateInstanceVersion = fn Result(uint* pApiVersion);
def ProcFreeFunction = fn void(void* pUserData, void* pMemory);
def ProcInternalAllocationNotification = fn void(void* pUserData, usz size, InternalAllocationType allocationType, SystemAllocationScope allocationScope);
def ProcInternalFreeNotification = fn void(void* pUserData, usz size, InternalAllocationType allocationType, SystemAllocationScope allocationScope);
def ProcReallocationFunction = fn void*(void* pUserData, void* pOriginal, usz size, usz alignment, SystemAllocationScope allocationScope);

// Misc Procedure Types
def ProcDebugReportCallbackEXT = fn uint(DebugReportFlagsEXT flags, DebugReportObjectTypeEXT objectType, ulong object, usz location, int messageCode, ZString pLayerPrefix, ZString pMessage, void* pUserData);
def ProcVoidFunction = fn void();

// Instance Procedure Types
def ProcAcquireDrmDisplayEXT = fn Result(PhysicalDevice physicalDevice, int drmFd, DisplayKHR display);
def ProcAcquireWinrtDisplayNV = fn Result(PhysicalDevice physicalDevice, DisplayKHR display);
def ProcCreateDebugReportCallbackEXT = fn Result(Instance instance, DebugReportCallbackCreateInfoEXT* pCreateInfo, AllocationCallbacks* pAllocator, DebugReportCallbackEXT* pCallback);
def ProcCreateDebugUtilsMessengerEXT = fn Result(Instance instance, DebugUtilsMessengerCreateInfoEXT* pCreateInfo, AllocationCallbacks* pAllocator, DebugUtilsMessengerEXT* pMessenger);
def ProcCreateDevice = fn Result(PhysicalDevice physicalDevice, DeviceCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Device* pDevice);
def ProcCreateDisplayModeKHR = fn Result(PhysicalDevice physicalDevice, DisplayKHR display, DisplayModeCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, DisplayModeKHR* pMode);
def ProcCreateDisplayPlaneSurfaceKHR = fn Result(Instance instance, DisplaySurfaceCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, SurfaceKHR* pSurface);
def ProcCreateHeadlessSurfaceEXT = fn Result(Instance instance, HeadlessSurfaceCreateInfoEXT* pCreateInfo, AllocationCallbacks* pAllocator, SurfaceKHR* pSurface);
def ProcCreateIOSSurfaceMVK = fn Result(Instance instance, IOSSurfaceCreateInfoMVK* pCreateInfo, AllocationCallbacks* pAllocator, SurfaceKHR* pSurface);
def ProcCreateMacOSSurfaceMVK = fn Result(Instance instance, MacOSSurfaceCreateInfoMVK* pCreateInfo, AllocationCallbacks* pAllocator, SurfaceKHR* pSurface);
def ProcCreateMetalSurfaceEXT = fn Result(Instance instance, MetalSurfaceCreateInfoEXT* pCreateInfo, AllocationCallbacks* pAllocator, SurfaceKHR* pSurface);
def ProcCreateWaylandSurfaceKHR = fn Result(Instance instance, WaylandSurfaceCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, SurfaceKHR* pSurface);
def ProcCreateWin32SurfaceKHR = fn Result(Instance instance, Win32SurfaceCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, SurfaceKHR* pSurface);
def ProcCreateXcbSurfaceKHR = fn Result(Instance instance, XcbSurfaceCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, SurfaceKHR* pSurface);
def ProcCreateXlibSurfaceKHR = fn Result(Instance instance, XlibSurfaceCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, SurfaceKHR* pSurface);
def ProcDebugReportMessageEXT = fn void(Instance instance, DebugReportFlagsEXT flags, DebugReportObjectTypeEXT objectType, ulong object, usz location, int messageCode, ZString pLayerPrefix, ZString pMessage);
def ProcDestroyDebugReportCallbackEXT = fn void(Instance instance, DebugReportCallbackEXT callback, AllocationCallbacks* pAllocator);
def ProcDestroyDebugUtilsMessengerEXT = fn void(Instance instance, DebugUtilsMessengerEXT messenger, AllocationCallbacks* pAllocator);
def ProcDestroyInstance = fn void(Instance instance, AllocationCallbacks* pAllocator);
def ProcDestroySurfaceKHR = fn void(Instance instance, SurfaceKHR surface, AllocationCallbacks* pAllocator);
def ProcEnumerateDeviceExtensionProperties = fn Result(PhysicalDevice physicalDevice, ZString pLayerName, uint* pPropertyCount, ExtensionProperties* pProperties);
def ProcEnumerateDeviceLayerProperties = fn Result(PhysicalDevice physicalDevice, uint* pPropertyCount, LayerProperties* pProperties);
def ProcEnumeratePhysicalDeviceGroups = fn Result(Instance instance, uint* pPhysicalDeviceGroupCount, PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);
def ProcEnumeratePhysicalDeviceGroupsKHR = fn Result(Instance instance, uint* pPhysicalDeviceGroupCount, PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);
def ProcEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn Result(PhysicalDevice physicalDevice, uint queueFamilyIndex, uint* pCounterCount, PerformanceCounterKHR* pCounters, PerformanceCounterDescriptionKHR* pCounterDescriptions);
def ProcEnumeratePhysicalDevices = fn Result(Instance instance, uint* pPhysicalDeviceCount, PhysicalDevice* pPhysicalDevices);
def ProcGetDisplayModeProperties2KHR = fn Result(PhysicalDevice physicalDevice, DisplayKHR display, uint* pPropertyCount, DisplayModeProperties2KHR* pProperties);
def ProcGetDisplayModePropertiesKHR = fn Result(PhysicalDevice physicalDevice, DisplayKHR display, uint* pPropertyCount, DisplayModePropertiesKHR* pProperties);
def ProcGetDisplayPlaneCapabilities2KHR = fn Result(PhysicalDevice physicalDevice, DisplayPlaneInfo2KHR* pDisplayPlaneInfo, DisplayPlaneCapabilities2KHR* pCapabilities);
def ProcGetDisplayPlaneCapabilitiesKHR = fn Result(PhysicalDevice physicalDevice, DisplayModeKHR mode, uint planeIndex, DisplayPlaneCapabilitiesKHR* pCapabilities);
def ProcGetDisplayPlaneSupportedDisplaysKHR = fn Result(PhysicalDevice physicalDevice, uint planeIndex, uint* pDisplayCount, DisplayKHR* pDisplays);
def ProcGetDrmDisplayEXT = fn Result(PhysicalDevice physicalDevice, int drmFd, uint connectorId, DisplayKHR* display);
def ProcGetInstanceProcAddr = fn ProcVoidFunction(Instance instance, ZString pName);
def ProcGetInstanceProcAddrLUNARG = fn ProcVoidFunction(Instance instance, ZString pName);
def ProcGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn Result(PhysicalDevice physicalDevice, uint* pTimeDomainCount, TimeDomainKHR* pTimeDomains);
def ProcGetPhysicalDeviceCalibrateableTimeDomainsKHR = fn Result(PhysicalDevice physicalDevice, uint* pTimeDomainCount, TimeDomainKHR* pTimeDomains);
def ProcGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV = fn Result(PhysicalDevice physicalDevice, uint* pPropertyCount, CooperativeMatrixFlexibleDimensionsPropertiesNV* pProperties);
def ProcGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn Result(PhysicalDevice physicalDevice, uint* pPropertyCount, CooperativeMatrixPropertiesKHR* pProperties);
def ProcGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn Result(PhysicalDevice physicalDevice, uint* pPropertyCount, CooperativeMatrixPropertiesNV* pProperties);
def ProcGetPhysicalDeviceCooperativeVectorPropertiesNV = fn Result(PhysicalDevice physicalDevice, uint* pPropertyCount, CooperativeVectorPropertiesNV* pProperties);
def ProcGetPhysicalDeviceDisplayPlaneProperties2KHR = fn Result(PhysicalDevice physicalDevice, uint* pPropertyCount, DisplayPlaneProperties2KHR* pProperties);
def ProcGetPhysicalDeviceDisplayPlanePropertiesKHR = fn Result(PhysicalDevice physicalDevice, uint* pPropertyCount, DisplayPlanePropertiesKHR* pProperties);
def ProcGetPhysicalDeviceDisplayProperties2KHR = fn Result(PhysicalDevice physicalDevice, uint* pPropertyCount, DisplayProperties2KHR* pProperties);
def ProcGetPhysicalDeviceDisplayPropertiesKHR = fn Result(PhysicalDevice physicalDevice, uint* pPropertyCount, DisplayPropertiesKHR* pProperties);
def ProcGetPhysicalDeviceExternalBufferProperties = fn void(PhysicalDevice physicalDevice, PhysicalDeviceExternalBufferInfo* pExternalBufferInfo, ExternalBufferProperties* pExternalBufferProperties);
def ProcGetPhysicalDeviceExternalBufferPropertiesKHR = fn void(PhysicalDevice physicalDevice, PhysicalDeviceExternalBufferInfo* pExternalBufferInfo, ExternalBufferProperties* pExternalBufferProperties);
def ProcGetPhysicalDeviceExternalFenceProperties = fn void(PhysicalDevice physicalDevice, PhysicalDeviceExternalFenceInfo* pExternalFenceInfo, ExternalFenceProperties* pExternalFenceProperties);
def ProcGetPhysicalDeviceExternalFencePropertiesKHR = fn void(PhysicalDevice physicalDevice, PhysicalDeviceExternalFenceInfo* pExternalFenceInfo, ExternalFenceProperties* pExternalFenceProperties);
def ProcGetPhysicalDeviceExternalImageFormatPropertiesNV = fn Result(PhysicalDevice physicalDevice, Format format, ImageType type, ImageTiling tiling, ImageUsageFlags usage, ImageCreateFlags flags, ExternalMemoryHandleTypeFlagsNV externalHandleType, ExternalImageFormatPropertiesNV* pExternalImageFormatProperties);
def ProcGetPhysicalDeviceExternalSemaphoreProperties = fn void(PhysicalDevice physicalDevice, PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, ExternalSemaphoreProperties* pExternalSemaphoreProperties);
def ProcGetPhysicalDeviceExternalSemaphorePropertiesKHR = fn void(PhysicalDevice physicalDevice, PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, ExternalSemaphoreProperties* pExternalSemaphoreProperties);
def ProcGetPhysicalDeviceFeatures = fn void(PhysicalDevice physicalDevice, PhysicalDeviceFeatures* pFeatures);
def ProcGetPhysicalDeviceFeatures2 = fn void(PhysicalDevice physicalDevice, PhysicalDeviceFeatures2* pFeatures);
def ProcGetPhysicalDeviceFeatures2KHR = fn void(PhysicalDevice physicalDevice, PhysicalDeviceFeatures2* pFeatures);
def ProcGetPhysicalDeviceFormatProperties = fn void(PhysicalDevice physicalDevice, Format format, FormatProperties* pFormatProperties);
def ProcGetPhysicalDeviceFormatProperties2 = fn void(PhysicalDevice physicalDevice, Format format, FormatProperties2* pFormatProperties);
def ProcGetPhysicalDeviceFormatProperties2KHR = fn void(PhysicalDevice physicalDevice, Format format, FormatProperties2* pFormatProperties);
def ProcGetPhysicalDeviceFragmentShadingRatesKHR = fn Result(PhysicalDevice physicalDevice, uint* pFragmentShadingRateCount, PhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates);
def ProcGetPhysicalDeviceImageFormatProperties = fn Result(PhysicalDevice physicalDevice, Format format, ImageType type, ImageTiling tiling, ImageUsageFlags usage, ImageCreateFlags flags, ImageFormatProperties* pImageFormatProperties);
def ProcGetPhysicalDeviceImageFormatProperties2 = fn Result(PhysicalDevice physicalDevice, PhysicalDeviceImageFormatInfo2* pImageFormatInfo, ImageFormatProperties2* pImageFormatProperties);
def ProcGetPhysicalDeviceImageFormatProperties2KHR = fn Result(PhysicalDevice physicalDevice, PhysicalDeviceImageFormatInfo2* pImageFormatInfo, ImageFormatProperties2* pImageFormatProperties);
def ProcGetPhysicalDeviceMemoryProperties = fn void(PhysicalDevice physicalDevice, PhysicalDeviceMemoryProperties* pMemoryProperties);
def ProcGetPhysicalDeviceMemoryProperties2 = fn void(PhysicalDevice physicalDevice, PhysicalDeviceMemoryProperties2* pMemoryProperties);
def ProcGetPhysicalDeviceMemoryProperties2KHR = fn void(PhysicalDevice physicalDevice, PhysicalDeviceMemoryProperties2* pMemoryProperties);
def ProcGetPhysicalDeviceMultisamplePropertiesEXT = fn void(PhysicalDevice physicalDevice, SampleCountFlags samples, MultisamplePropertiesEXT* pMultisampleProperties);
def ProcGetPhysicalDeviceOpticalFlowImageFormatsNV = fn Result(PhysicalDevice physicalDevice, OpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, uint* pFormatCount, OpticalFlowImageFormatPropertiesNV* pImageFormatProperties);
def ProcGetPhysicalDevicePresentRectanglesKHR = fn Result(PhysicalDevice physicalDevice, SurfaceKHR surface, uint* pRectCount, Rect2D* pRects);
def ProcGetPhysicalDeviceProperties = fn void(PhysicalDevice physicalDevice, PhysicalDeviceProperties* pProperties);
def ProcGetPhysicalDeviceProperties2 = fn void(PhysicalDevice physicalDevice, PhysicalDeviceProperties2* pProperties);
def ProcGetPhysicalDeviceProperties2KHR = fn void(PhysicalDevice physicalDevice, PhysicalDeviceProperties2* pProperties);
def ProcGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn void(PhysicalDevice physicalDevice, QueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint* pNumPasses);
def ProcGetPhysicalDeviceQueueFamilyProperties = fn void(PhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, QueueFamilyProperties* pQueueFamilyProperties);
def ProcGetPhysicalDeviceQueueFamilyProperties2 = fn void(PhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, QueueFamilyProperties2* pQueueFamilyProperties);
def ProcGetPhysicalDeviceQueueFamilyProperties2KHR = fn void(PhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, QueueFamilyProperties2* pQueueFamilyProperties);
def ProcGetPhysicalDeviceSparseImageFormatProperties = fn void(PhysicalDevice physicalDevice, Format format, ImageType type, SampleCountFlags samples, ImageUsageFlags usage, ImageTiling tiling, uint* pPropertyCount, SparseImageFormatProperties* pProperties);
def ProcGetPhysicalDeviceSparseImageFormatProperties2 = fn void(PhysicalDevice physicalDevice, PhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, SparseImageFormatProperties2* pProperties);
def ProcGetPhysicalDeviceSparseImageFormatProperties2KHR = fn void(PhysicalDevice physicalDevice, PhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, SparseImageFormatProperties2* pProperties);
def ProcGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn Result(PhysicalDevice physicalDevice, uint* pCombinationCount, FramebufferMixedSamplesCombinationNV* pCombinations);
def ProcGetPhysicalDeviceSurfaceCapabilities2EXT = fn Result(PhysicalDevice physicalDevice, SurfaceKHR surface, SurfaceCapabilities2EXT* pSurfaceCapabilities);
def ProcGetPhysicalDeviceSurfaceCapabilities2KHR = fn Result(PhysicalDevice physicalDevice, PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, SurfaceCapabilities2KHR* pSurfaceCapabilities);
def ProcGetPhysicalDeviceSurfaceCapabilitiesKHR = fn Result(PhysicalDevice physicalDevice, SurfaceKHR surface, SurfaceCapabilitiesKHR* pSurfaceCapabilities);
def ProcGetPhysicalDeviceSurfaceFormats2KHR = fn Result(PhysicalDevice physicalDevice, PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint* pSurfaceFormatCount, SurfaceFormat2KHR* pSurfaceFormats);
def ProcGetPhysicalDeviceSurfaceFormatsKHR = fn Result(PhysicalDevice physicalDevice, SurfaceKHR surface, uint* pSurfaceFormatCount, SurfaceFormatKHR* pSurfaceFormats);
def ProcGetPhysicalDeviceSurfacePresentModes2EXT = fn Result(PhysicalDevice physicalDevice, PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint* pPresentModeCount, PresentModeKHR* pPresentModes);
def ProcGetPhysicalDeviceSurfacePresentModesKHR = fn Result(PhysicalDevice physicalDevice, SurfaceKHR surface, uint* pPresentModeCount, PresentModeKHR* pPresentModes);
def ProcGetPhysicalDeviceSurfaceSupportKHR = fn Result(PhysicalDevice physicalDevice, uint queueFamilyIndex, SurfaceKHR surface, uint* pSupported);
def ProcGetPhysicalDeviceToolProperties = fn Result(PhysicalDevice physicalDevice, uint* pToolCount, PhysicalDeviceToolProperties* pToolProperties);
def ProcGetPhysicalDeviceToolPropertiesEXT = fn Result(PhysicalDevice physicalDevice, uint* pToolCount, PhysicalDeviceToolProperties* pToolProperties);
def ProcGetPhysicalDeviceVideoCapabilitiesKHR = fn Result(PhysicalDevice physicalDevice, VideoProfileInfoKHR* pVideoProfile, VideoCapabilitiesKHR* pCapabilities);
def ProcGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn Result(PhysicalDevice physicalDevice, PhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo, VideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties);
def ProcGetPhysicalDeviceVideoFormatPropertiesKHR = fn Result(PhysicalDevice physicalDevice, PhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, uint* pVideoFormatPropertyCount, VideoFormatPropertiesKHR* pVideoFormatProperties);
def ProcGetPhysicalDeviceWaylandPresentationSupportKHR = fn uint(PhysicalDevice physicalDevice, uint queueFamilyIndex, WLDisplay* display);
def ProcGetPhysicalDeviceWin32PresentationSupportKHR = fn uint(PhysicalDevice physicalDevice, uint queueFamilyIndex);
def ProcGetPhysicalDeviceXcbPresentationSupportKHR = fn uint(PhysicalDevice physicalDevice, uint queueFamilyIndex, XCBConnection* connection, XCBVisualID visual_id);
def ProcGetPhysicalDeviceXlibPresentationSupportKHR = fn uint(PhysicalDevice physicalDevice, uint queueFamilyIndex, XlibDisplay* dpy, XlibVisualID visualID);
def ProcGetWinrtDisplayNV = fn Result(PhysicalDevice physicalDevice, uint deviceRelativeId, DisplayKHR* pDisplay);
def ProcReleaseDisplayEXT = fn Result(PhysicalDevice physicalDevice, DisplayKHR display);
def ProcSubmitDebugUtilsMessageEXT = fn void(Instance instance, DebugUtilsMessageSeverityFlagsEXT messageSeverity, DebugUtilsMessageTypeFlagsEXT messageTypes, DebugUtilsMessengerCallbackDataEXT* pCallbackData);

// Device Procedure Types
def ProcAcquireFullScreenExclusiveModeEXT = fn Result(Device device, SwapchainKHR swapchain);
def ProcAcquireNextImage2KHR = fn Result(Device device, AcquireNextImageInfoKHR* pAcquireInfo, uint* pImageIndex);
def ProcAcquireNextImageKHR = fn Result(Device device, SwapchainKHR swapchain, ulong timeout, Semaphore semaphore, Fence fence, uint* pImageIndex);
def ProcAcquirePerformanceConfigurationINTEL = fn Result(Device device, PerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, PerformanceConfigurationINTEL* pConfiguration);
def ProcAcquireProfilingLockKHR = fn Result(Device device, AcquireProfilingLockInfoKHR* pInfo);
def ProcAllocateCommandBuffers = fn Result(Device device, CommandBufferAllocateInfo* pAllocateInfo, CommandBuffer* pCommandBuffers);
def ProcAllocateDescriptorSets = fn Result(Device device, DescriptorSetAllocateInfo* pAllocateInfo, DescriptorSet* pDescriptorSets);
def ProcAllocateMemory = fn Result(Device device, MemoryAllocateInfo* pAllocateInfo, AllocationCallbacks* pAllocator, DeviceMemory* pMemory);
def ProcAntiLagUpdateAMD = fn void(Device device, AntiLagDataAMD* pData);
def ProcBeginCommandBuffer = fn Result(CommandBuffer commandBuffer, CommandBufferBeginInfo* pBeginInfo);
def ProcBindAccelerationStructureMemoryNV = fn Result(Device device, uint bindInfoCount, BindAccelerationStructureMemoryInfoNV* pBindInfos);
def ProcBindBufferMemory = fn Result(Device device, Buffer buffer, DeviceMemory memory, DeviceSize memoryOffset);
def ProcBindBufferMemory2 = fn Result(Device device, uint bindInfoCount, BindBufferMemoryInfo* pBindInfos);
def ProcBindBufferMemory2KHR = fn Result(Device device, uint bindInfoCount, BindBufferMemoryInfo* pBindInfos);
def ProcBindImageMemory = fn Result(Device device, Image image, DeviceMemory memory, DeviceSize memoryOffset);
def ProcBindImageMemory2 = fn Result(Device device, uint bindInfoCount, BindImageMemoryInfo* pBindInfos);
def ProcBindImageMemory2KHR = fn Result(Device device, uint bindInfoCount, BindImageMemoryInfo* pBindInfos);
def ProcBindOpticalFlowSessionImageNV = fn Result(Device device, OpticalFlowSessionNV session, OpticalFlowSessionBindingPointNV bindingPoint, ImageView view, ImageLayout layout);
def ProcBindVideoSessionMemoryKHR = fn Result(Device device, VideoSessionKHR videoSession, uint bindSessionMemoryInfoCount, BindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos);
def ProcBuildAccelerationStructuresKHR = fn Result(Device device, DeferredOperationKHR deferredOperation, uint infoCount, AccelerationStructureBuildGeometryInfoKHR* pInfos, AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos);
def ProcBuildMicromapsEXT = fn Result(Device device, DeferredOperationKHR deferredOperation, uint infoCount, MicromapBuildInfoEXT* pInfos);
def ProcCmdBeginConditionalRenderingEXT = fn void(CommandBuffer commandBuffer, ConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin);
def ProcCmdBeginDebugUtilsLabelEXT = fn void(CommandBuffer commandBuffer, DebugUtilsLabelEXT* pLabelInfo);
def ProcCmdBeginQuery = fn void(CommandBuffer commandBuffer, QueryPool queryPool, uint query, QueryControlFlags flags);
def ProcCmdBeginQueryIndexedEXT = fn void(CommandBuffer commandBuffer, QueryPool queryPool, uint query, QueryControlFlags flags, uint index);
def ProcCmdBeginRenderPass = fn void(CommandBuffer commandBuffer, RenderPassBeginInfo* pRenderPassBegin, SubpassContents contents);
def ProcCmdBeginRenderPass2 = fn void(CommandBuffer commandBuffer, RenderPassBeginInfo* pRenderPassBegin, SubpassBeginInfo* pSubpassBeginInfo);
def ProcCmdBeginRenderPass2KHR = fn void(CommandBuffer commandBuffer, RenderPassBeginInfo* pRenderPassBegin, SubpassBeginInfo* pSubpassBeginInfo);
def ProcCmdBeginRendering = fn void(CommandBuffer commandBuffer, RenderingInfo* pRenderingInfo);
def ProcCmdBeginRenderingKHR = fn void(CommandBuffer commandBuffer, RenderingInfo* pRenderingInfo);
def ProcCmdBeginTransformFeedbackEXT = fn void(CommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, Buffer* pCounterBuffers, DeviceSize* pCounterBufferOffsets);
def ProcCmdBeginVideoCodingKHR = fn void(CommandBuffer commandBuffer, VideoBeginCodingInfoKHR* pBeginInfo);
def ProcCmdBindDescriptorBufferEmbeddedSamplers2EXT = fn void(CommandBuffer commandBuffer, BindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo);
def ProcCmdBindDescriptorBufferEmbeddedSamplersEXT = fn void(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint set);
def ProcCmdBindDescriptorBuffersEXT = fn void(CommandBuffer commandBuffer, uint bufferCount, DescriptorBufferBindingInfoEXT* pBindingInfos);
def ProcCmdBindDescriptorSets = fn void(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint firstSet, uint descriptorSetCount, DescriptorSet* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets);
def ProcCmdBindDescriptorSets2 = fn void(CommandBuffer commandBuffer, BindDescriptorSetsInfo* pBindDescriptorSetsInfo);
def ProcCmdBindDescriptorSets2KHR = fn void(CommandBuffer commandBuffer, BindDescriptorSetsInfo* pBindDescriptorSetsInfo);
def ProcCmdBindIndexBuffer = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, IndexType indexType);
def ProcCmdBindIndexBuffer2 = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, DeviceSize size, IndexType indexType);
def ProcCmdBindIndexBuffer2KHR = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, DeviceSize size, IndexType indexType);
def ProcCmdBindInvocationMaskHUAWEI = fn void(CommandBuffer commandBuffer, ImageView imageView, ImageLayout imageLayout);
def ProcCmdBindPipeline = fn void(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, Pipeline pipeline);
def ProcCmdBindPipelineShaderGroupNV = fn void(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, Pipeline pipeline, uint groupIndex);
def ProcCmdBindShadersEXT = fn void(CommandBuffer commandBuffer, uint stageCount, ShaderStageFlags* pStages, ShaderEXT* pShaders);
def ProcCmdBindShadingRateImageNV = fn void(CommandBuffer commandBuffer, ImageView imageView, ImageLayout imageLayout);
def ProcCmdBindTransformFeedbackBuffersEXT = fn void(CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Buffer* pBuffers, DeviceSize* pOffsets, DeviceSize* pSizes);
def ProcCmdBindVertexBuffers = fn void(CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Buffer* pBuffers, DeviceSize* pOffsets);
def ProcCmdBindVertexBuffers2 = fn void(CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Buffer* pBuffers, DeviceSize* pOffsets, DeviceSize* pSizes, DeviceSize* pStrides);
def ProcCmdBindVertexBuffers2EXT = fn void(CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Buffer* pBuffers, DeviceSize* pOffsets, DeviceSize* pSizes, DeviceSize* pStrides);
def ProcCmdBlitImage = fn void(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint regionCount, ImageBlit* pRegions, Filter filter);
def ProcCmdBlitImage2 = fn void(CommandBuffer commandBuffer, BlitImageInfo2* pBlitImageInfo);
def ProcCmdBlitImage2KHR = fn void(CommandBuffer commandBuffer, BlitImageInfo2* pBlitImageInfo);
def ProcCmdBuildAccelerationStructureNV = fn void(CommandBuffer commandBuffer, AccelerationStructureInfoNV* pInfo, Buffer instanceData, DeviceSize instanceOffset, uint update, AccelerationStructureNV dst, AccelerationStructureNV src, Buffer scratch, DeviceSize scratchOffset);
def ProcCmdBuildAccelerationStructuresIndirectKHR = fn void(CommandBuffer commandBuffer, uint infoCount, AccelerationStructureBuildGeometryInfoKHR* pInfos, DeviceAddress* pIndirectDeviceAddresses, uint* pIndirectStrides, uint*[] ppMaxPrimitiveCounts);
def ProcCmdBuildAccelerationStructuresKHR = fn void(CommandBuffer commandBuffer, uint infoCount, AccelerationStructureBuildGeometryInfoKHR* pInfos, AccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos);
def ProcCmdBuildClusterAccelerationStructureIndirectNV = fn void(CommandBuffer commandBuffer, ClusterAccelerationStructureCommandsInfoNV* pCommandInfos);
def ProcCmdBuildMicromapsEXT = fn void(CommandBuffer commandBuffer, uint infoCount, MicromapBuildInfoEXT* pInfos);
def ProcCmdBuildPartitionedAccelerationStructuresNV = fn void(CommandBuffer commandBuffer, BuildPartitionedAccelerationStructureInfoNV* pBuildInfo);
def ProcCmdClearAttachments = fn void(CommandBuffer commandBuffer, uint attachmentCount, ClearAttachment* pAttachments, uint rectCount, ClearRect* pRects);
def ProcCmdClearColorImage = fn void(CommandBuffer commandBuffer, Image image, ImageLayout imageLayout, ClearColorValue* pColor, uint rangeCount, ImageSubresourceRange* pRanges);
def ProcCmdClearDepthStencilImage = fn void(CommandBuffer commandBuffer, Image image, ImageLayout imageLayout, ClearDepthStencilValue* pDepthStencil, uint rangeCount, ImageSubresourceRange* pRanges);
def ProcCmdControlVideoCodingKHR = fn void(CommandBuffer commandBuffer, VideoCodingControlInfoKHR* pCodingControlInfo);
def ProcCmdConvertCooperativeVectorMatrixNV = fn void(CommandBuffer commandBuffer, uint infoCount, ConvertCooperativeVectorMatrixInfoNV* pInfos);
def ProcCmdCopyAccelerationStructureKHR = fn void(CommandBuffer commandBuffer, CopyAccelerationStructureInfoKHR* pInfo);
def ProcCmdCopyAccelerationStructureNV = fn void(CommandBuffer commandBuffer, AccelerationStructureNV dst, AccelerationStructureNV src, CopyAccelerationStructureModeKHR mode);
def ProcCmdCopyAccelerationStructureToMemoryKHR = fn void(CommandBuffer commandBuffer, CopyAccelerationStructureToMemoryInfoKHR* pInfo);
def ProcCmdCopyBuffer = fn void(CommandBuffer commandBuffer, Buffer srcBuffer, Buffer dstBuffer, uint regionCount, BufferCopy* pRegions);
def ProcCmdCopyBuffer2 = fn void(CommandBuffer commandBuffer, CopyBufferInfo2* pCopyBufferInfo);
def ProcCmdCopyBuffer2KHR = fn void(CommandBuffer commandBuffer, CopyBufferInfo2* pCopyBufferInfo);
def ProcCmdCopyBufferToImage = fn void(CommandBuffer commandBuffer, Buffer srcBuffer, Image dstImage, ImageLayout dstImageLayout, uint regionCount, BufferImageCopy* pRegions);
def ProcCmdCopyBufferToImage2 = fn void(CommandBuffer commandBuffer, CopyBufferToImageInfo2* pCopyBufferToImageInfo);
def ProcCmdCopyBufferToImage2KHR = fn void(CommandBuffer commandBuffer, CopyBufferToImageInfo2* pCopyBufferToImageInfo);
def ProcCmdCopyImage = fn void(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint regionCount, ImageCopy* pRegions);
def ProcCmdCopyImage2 = fn void(CommandBuffer commandBuffer, CopyImageInfo2* pCopyImageInfo);
def ProcCmdCopyImage2KHR = fn void(CommandBuffer commandBuffer, CopyImageInfo2* pCopyImageInfo);
def ProcCmdCopyImageToBuffer = fn void(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Buffer dstBuffer, uint regionCount, BufferImageCopy* pRegions);
def ProcCmdCopyImageToBuffer2 = fn void(CommandBuffer commandBuffer, CopyImageToBufferInfo2* pCopyImageToBufferInfo);
def ProcCmdCopyImageToBuffer2KHR = fn void(CommandBuffer commandBuffer, CopyImageToBufferInfo2* pCopyImageToBufferInfo);
def ProcCmdCopyMemoryIndirectNV = fn void(CommandBuffer commandBuffer, DeviceAddress copyBufferAddress, uint copyCount, uint stride);
def ProcCmdCopyMemoryToAccelerationStructureKHR = fn void(CommandBuffer commandBuffer, CopyMemoryToAccelerationStructureInfoKHR* pInfo);
def ProcCmdCopyMemoryToImageIndirectNV = fn void(CommandBuffer commandBuffer, DeviceAddress copyBufferAddress, uint copyCount, uint stride, Image dstImage, ImageLayout dstImageLayout, ImageSubresourceLayers* pImageSubresources);
def ProcCmdCopyMemoryToMicromapEXT = fn void(CommandBuffer commandBuffer, CopyMemoryToMicromapInfoEXT* pInfo);
def ProcCmdCopyMicromapEXT = fn void(CommandBuffer commandBuffer, CopyMicromapInfoEXT* pInfo);
def ProcCmdCopyMicromapToMemoryEXT = fn void(CommandBuffer commandBuffer, CopyMicromapToMemoryInfoEXT* pInfo);
def ProcCmdCopyQueryPoolResults = fn void(CommandBuffer commandBuffer, QueryPool queryPool, uint firstQuery, uint queryCount, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize stride, QueryResultFlags flags);
def ProcCmdCuLaunchKernelNVX = fn void(CommandBuffer commandBuffer, CuLaunchInfoNVX* pLaunchInfo);
def ProcCmdCudaLaunchKernelNV = fn void(CommandBuffer commandBuffer, CudaLaunchInfoNV* pLaunchInfo);
def ProcCmdDebugMarkerBeginEXT = fn void(CommandBuffer commandBuffer, DebugMarkerMarkerInfoEXT* pMarkerInfo);
def ProcCmdDebugMarkerEndEXT = fn void(CommandBuffer commandBuffer);
def ProcCmdDebugMarkerInsertEXT = fn void(CommandBuffer commandBuffer, DebugMarkerMarkerInfoEXT* pMarkerInfo);
def ProcCmdDecodeVideoKHR = fn void(CommandBuffer commandBuffer, VideoDecodeInfoKHR* pDecodeInfo);
def ProcCmdDecompressMemoryIndirectCountNV = fn void(CommandBuffer commandBuffer, DeviceAddress indirectCommandsAddress, DeviceAddress indirectCommandsCountAddress, uint stride);
def ProcCmdDecompressMemoryNV = fn void(CommandBuffer commandBuffer, uint decompressRegionCount, DecompressMemoryRegionNV* pDecompressMemoryRegions);
def ProcCmdDispatch = fn void(CommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);
def ProcCmdDispatchBase = fn void(CommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);
def ProcCmdDispatchBaseKHR = fn void(CommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);
def ProcCmdDispatchIndirect = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset);
def ProcCmdDraw = fn void(CommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
def ProcCmdDrawClusterHUAWEI = fn void(CommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);
def ProcCmdDrawClusterIndirectHUAWEI = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset);
def ProcCmdDrawIndexed = fn void(CommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);
def ProcCmdDrawIndexedIndirect = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, uint drawCount, uint stride);
def ProcCmdDrawIndexedIndirectCount = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint maxDrawCount, uint stride);
def ProcCmdDrawIndexedIndirectCountAMD = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint maxDrawCount, uint stride);
def ProcCmdDrawIndexedIndirectCountKHR = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint maxDrawCount, uint stride);
def ProcCmdDrawIndirect = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, uint drawCount, uint stride);
def ProcCmdDrawIndirectByteCountEXT = fn void(CommandBuffer commandBuffer, uint instanceCount, uint firstInstance, Buffer counterBuffer, DeviceSize counterBufferOffset, uint counterOffset, uint vertexStride);
def ProcCmdDrawIndirectCount = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint maxDrawCount, uint stride);
def ProcCmdDrawIndirectCountAMD = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint maxDrawCount, uint stride);
def ProcCmdDrawIndirectCountKHR = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint maxDrawCount, uint stride);
def ProcCmdDrawMeshTasksEXT = fn void(CommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);
def ProcCmdDrawMeshTasksIndirectCountEXT = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint maxDrawCount, uint stride);
def ProcCmdDrawMeshTasksIndirectCountNV = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint maxDrawCount, uint stride);
def ProcCmdDrawMeshTasksIndirectEXT = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, uint drawCount, uint stride);
def ProcCmdDrawMeshTasksIndirectNV = fn void(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, uint drawCount, uint stride);
def ProcCmdDrawMeshTasksNV = fn void(CommandBuffer commandBuffer, uint taskCount, uint firstTask);
def ProcCmdDrawMultiEXT = fn void(CommandBuffer commandBuffer, uint drawCount, MultiDrawInfoEXT* pVertexInfo, uint instanceCount, uint firstInstance, uint stride);
def ProcCmdDrawMultiIndexedEXT = fn void(CommandBuffer commandBuffer, uint drawCount, MultiDrawIndexedInfoEXT* pIndexInfo, uint instanceCount, uint firstInstance, uint stride, int* pVertexOffset);
def ProcCmdEncodeVideoKHR = fn void(CommandBuffer commandBuffer, VideoEncodeInfoKHR* pEncodeInfo);
def ProcCmdEndConditionalRenderingEXT = fn void(CommandBuffer commandBuffer);
def ProcCmdEndDebugUtilsLabelEXT = fn void(CommandBuffer commandBuffer);
def ProcCmdEndQuery = fn void(CommandBuffer commandBuffer, QueryPool queryPool, uint query);
def ProcCmdEndQueryIndexedEXT = fn void(CommandBuffer commandBuffer, QueryPool queryPool, uint query, uint index);
def ProcCmdEndRenderPass = fn void(CommandBuffer commandBuffer);
def ProcCmdEndRenderPass2 = fn void(CommandBuffer commandBuffer, SubpassEndInfo* pSubpassEndInfo);
def ProcCmdEndRenderPass2KHR = fn void(CommandBuffer commandBuffer, SubpassEndInfo* pSubpassEndInfo);
def ProcCmdEndRendering = fn void(CommandBuffer commandBuffer);
def ProcCmdEndRenderingKHR = fn void(CommandBuffer commandBuffer);
def ProcCmdEndTransformFeedbackEXT = fn void(CommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, Buffer* pCounterBuffers, DeviceSize* pCounterBufferOffsets);
def ProcCmdEndVideoCodingKHR = fn void(CommandBuffer commandBuffer, VideoEndCodingInfoKHR* pEndCodingInfo);
def ProcCmdExecuteCommands = fn void(CommandBuffer commandBuffer, uint commandBufferCount, CommandBuffer* pCommandBuffers);
def ProcCmdExecuteGeneratedCommandsEXT = fn void(CommandBuffer commandBuffer, uint isPreprocessed, GeneratedCommandsInfoEXT* pGeneratedCommandsInfo);
def ProcCmdExecuteGeneratedCommandsNV = fn void(CommandBuffer commandBuffer, uint isPreprocessed, GeneratedCommandsInfoNV* pGeneratedCommandsInfo);
def ProcCmdFillBuffer = fn void(CommandBuffer commandBuffer, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize size, uint data);
def ProcCmdInsertDebugUtilsLabelEXT = fn void(CommandBuffer commandBuffer, DebugUtilsLabelEXT* pLabelInfo);
def ProcCmdNextSubpass = fn void(CommandBuffer commandBuffer, SubpassContents contents);
def ProcCmdNextSubpass2 = fn void(CommandBuffer commandBuffer, SubpassBeginInfo* pSubpassBeginInfo, SubpassEndInfo* pSubpassEndInfo);
def ProcCmdNextSubpass2KHR = fn void(CommandBuffer commandBuffer, SubpassBeginInfo* pSubpassBeginInfo, SubpassEndInfo* pSubpassEndInfo);
def ProcCmdOpticalFlowExecuteNV = fn void(CommandBuffer commandBuffer, OpticalFlowSessionNV session, OpticalFlowExecuteInfoNV* pExecuteInfo);
def ProcCmdPipelineBarrier = fn void(CommandBuffer commandBuffer, PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, DependencyFlags dependencyFlags, uint memoryBarrierCount, MemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, BufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, ImageMemoryBarrier* pImageMemoryBarriers);
def ProcCmdPipelineBarrier2 = fn void(CommandBuffer commandBuffer, DependencyInfo* pDependencyInfo);
def ProcCmdPipelineBarrier2KHR = fn void(CommandBuffer commandBuffer, DependencyInfo* pDependencyInfo);
def ProcCmdPreprocessGeneratedCommandsEXT = fn void(CommandBuffer commandBuffer, GeneratedCommandsInfoEXT* pGeneratedCommandsInfo, CommandBuffer stateCommandBuffer);
def ProcCmdPreprocessGeneratedCommandsNV = fn void(CommandBuffer commandBuffer, GeneratedCommandsInfoNV* pGeneratedCommandsInfo);
def ProcCmdPushConstants = fn void(CommandBuffer commandBuffer, PipelineLayout layout, ShaderStageFlags stageFlags, uint offset, uint size, void* pValues);
def ProcCmdPushConstants2 = fn void(CommandBuffer commandBuffer, PushConstantsInfo* pPushConstantsInfo);
def ProcCmdPushConstants2KHR = fn void(CommandBuffer commandBuffer, PushConstantsInfo* pPushConstantsInfo);
def ProcCmdPushDescriptorSet = fn void(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint set, uint descriptorWriteCount, WriteDescriptorSet* pDescriptorWrites);
def ProcCmdPushDescriptorSet2 = fn void(CommandBuffer commandBuffer, PushDescriptorSetInfo* pPushDescriptorSetInfo);
def ProcCmdPushDescriptorSet2KHR = fn void(CommandBuffer commandBuffer, PushDescriptorSetInfo* pPushDescriptorSetInfo);
def ProcCmdPushDescriptorSetKHR = fn void(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint set, uint descriptorWriteCount, WriteDescriptorSet* pDescriptorWrites);
def ProcCmdPushDescriptorSetWithTemplate = fn void(CommandBuffer commandBuffer, DescriptorUpdateTemplate descriptorUpdateTemplate, PipelineLayout layout, uint set, void* pData);
def ProcCmdPushDescriptorSetWithTemplate2 = fn void(CommandBuffer commandBuffer, PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo);
def ProcCmdPushDescriptorSetWithTemplate2KHR = fn void(CommandBuffer commandBuffer, PushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo);
def ProcCmdPushDescriptorSetWithTemplateKHR = fn void(CommandBuffer commandBuffer, DescriptorUpdateTemplate descriptorUpdateTemplate, PipelineLayout layout, uint set, void* pData);
def ProcCmdResetEvent = fn void(CommandBuffer commandBuffer, Event event, PipelineStageFlags stageMask);
def ProcCmdResetEvent2 = fn void(CommandBuffer commandBuffer, Event event, PipelineStageFlags2 stageMask);
def ProcCmdResetEvent2KHR = fn void(CommandBuffer commandBuffer, Event event, PipelineStageFlags2 stageMask);
def ProcCmdResetQueryPool = fn void(CommandBuffer commandBuffer, QueryPool queryPool, uint firstQuery, uint queryCount);
def ProcCmdResolveImage = fn void(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint regionCount, ImageResolve* pRegions);
def ProcCmdResolveImage2 = fn void(CommandBuffer commandBuffer, ResolveImageInfo2* pResolveImageInfo);
def ProcCmdResolveImage2KHR = fn void(CommandBuffer commandBuffer, ResolveImageInfo2* pResolveImageInfo);
def ProcCmdSetAlphaToCoverageEnableEXT = fn void(CommandBuffer commandBuffer, uint alphaToCoverageEnable);
def ProcCmdSetAlphaToOneEnableEXT = fn void(CommandBuffer commandBuffer, uint alphaToOneEnable);
def ProcCmdSetAttachmentFeedbackLoopEnableEXT = fn void(CommandBuffer commandBuffer, ImageAspectFlags aspectMask);
def ProcCmdSetBlendConstants = fn void(CommandBuffer commandBuffer, float*[4] blendConstants);
def ProcCmdSetCheckpointNV = fn void(CommandBuffer commandBuffer, void* pCheckpointMarker);
def ProcCmdSetCoarseSampleOrderNV = fn void(CommandBuffer commandBuffer, CoarseSampleOrderTypeNV sampleOrderType, uint customSampleOrderCount, CoarseSampleOrderCustomNV* pCustomSampleOrders);
def ProcCmdSetColorBlendAdvancedEXT = fn void(CommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, ColorBlendAdvancedEXT* pColorBlendAdvanced);
def ProcCmdSetColorBlendEnableEXT = fn void(CommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, uint* pColorBlendEnables);
def ProcCmdSetColorBlendEquationEXT = fn void(CommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, ColorBlendEquationEXT* pColorBlendEquations);
def ProcCmdSetColorWriteMaskEXT = fn void(CommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, ColorComponentFlags* pColorWriteMasks);
def ProcCmdSetConservativeRasterizationModeEXT = fn void(CommandBuffer commandBuffer, ConservativeRasterizationModeEXT conservativeRasterizationMode);
def ProcCmdSetCoverageModulationModeNV = fn void(CommandBuffer commandBuffer, CoverageModulationModeNV coverageModulationMode);
def ProcCmdSetCoverageModulationTableEnableNV = fn void(CommandBuffer commandBuffer, uint coverageModulationTableEnable);
def ProcCmdSetCoverageModulationTableNV = fn void(CommandBuffer commandBuffer, uint coverageModulationTableCount, float* pCoverageModulationTable);
def ProcCmdSetCoverageReductionModeNV = fn void(CommandBuffer commandBuffer, CoverageReductionModeNV coverageReductionMode);
def ProcCmdSetCoverageToColorEnableNV = fn void(CommandBuffer commandBuffer, uint coverageToColorEnable);
def ProcCmdSetCoverageToColorLocationNV = fn void(CommandBuffer commandBuffer, uint coverageToColorLocation);
def ProcCmdSetCullMode = fn void(CommandBuffer commandBuffer, CullModeFlags cullMode);
def ProcCmdSetCullModeEXT = fn void(CommandBuffer commandBuffer, CullModeFlags cullMode);
def ProcCmdSetDepthBias = fn void(CommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
def ProcCmdSetDepthBias2EXT = fn void(CommandBuffer commandBuffer, DepthBiasInfoEXT* pDepthBiasInfo);
def ProcCmdSetDepthBiasEnable = fn void(CommandBuffer commandBuffer, uint depthBiasEnable);
def ProcCmdSetDepthBiasEnableEXT = fn void(CommandBuffer commandBuffer, uint depthBiasEnable);
def ProcCmdSetDepthBounds = fn void(CommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
def ProcCmdSetDepthBoundsTestEnable = fn void(CommandBuffer commandBuffer, uint depthBoundsTestEnable);
def ProcCmdSetDepthBoundsTestEnableEXT = fn void(CommandBuffer commandBuffer, uint depthBoundsTestEnable);
def ProcCmdSetDepthClampEnableEXT = fn void(CommandBuffer commandBuffer, uint depthClampEnable);
def ProcCmdSetDepthClampRangeEXT = fn void(CommandBuffer commandBuffer, DepthClampModeEXT depthClampMode, DepthClampRangeEXT* pDepthClampRange);
def ProcCmdSetDepthClipEnableEXT = fn void(CommandBuffer commandBuffer, uint depthClipEnable);
def ProcCmdSetDepthClipNegativeOneToOneEXT = fn void(CommandBuffer commandBuffer, uint negativeOneToOne);
def ProcCmdSetDepthCompareOp = fn void(CommandBuffer commandBuffer, CompareOp depthCompareOp);
def ProcCmdSetDepthCompareOpEXT = fn void(CommandBuffer commandBuffer, CompareOp depthCompareOp);
def ProcCmdSetDepthTestEnable = fn void(CommandBuffer commandBuffer, uint depthTestEnable);
def ProcCmdSetDepthTestEnableEXT = fn void(CommandBuffer commandBuffer, uint depthTestEnable);
def ProcCmdSetDepthWriteEnable = fn void(CommandBuffer commandBuffer, uint depthWriteEnable);
def ProcCmdSetDepthWriteEnableEXT = fn void(CommandBuffer commandBuffer, uint depthWriteEnable);
def ProcCmdSetDescriptorBufferOffsets2EXT = fn void(CommandBuffer commandBuffer, SetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo);
def ProcCmdSetDescriptorBufferOffsetsEXT = fn void(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint firstSet, uint setCount, uint* pBufferIndices, DeviceSize* pOffsets);
def ProcCmdSetDeviceMask = fn void(CommandBuffer commandBuffer, uint deviceMask);
def ProcCmdSetDeviceMaskKHR = fn void(CommandBuffer commandBuffer, uint deviceMask);
def ProcCmdSetDiscardRectangleEXT = fn void(CommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, Rect2D* pDiscardRectangles);
def ProcCmdSetDiscardRectangleEnableEXT = fn void(CommandBuffer commandBuffer, uint discardRectangleEnable);
def ProcCmdSetDiscardRectangleModeEXT = fn void(CommandBuffer commandBuffer, DiscardRectangleModeEXT discardRectangleMode);
def ProcCmdSetEvent = fn void(CommandBuffer commandBuffer, Event event, PipelineStageFlags stageMask);
def ProcCmdSetEvent2 = fn void(CommandBuffer commandBuffer, Event event, DependencyInfo* pDependencyInfo);
def ProcCmdSetEvent2KHR = fn void(CommandBuffer commandBuffer, Event event, DependencyInfo* pDependencyInfo);
def ProcCmdSetExclusiveScissorEnableNV = fn void(CommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, uint* pExclusiveScissorEnables);
def ProcCmdSetExclusiveScissorNV = fn void(CommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, Rect2D* pExclusiveScissors);
def ProcCmdSetExtraPrimitiveOverestimationSizeEXT = fn void(CommandBuffer commandBuffer, float extraPrimitiveOverestimationSize);
def ProcCmdSetFragmentShadingRateEnumNV = fn void(CommandBuffer commandBuffer, FragmentShadingRateNV shadingRate, FragmentShadingRateCombinerOpKHR*[2] combinerOps);
def ProcCmdSetFragmentShadingRateKHR = fn void(CommandBuffer commandBuffer, Extent2D* pFragmentSize, FragmentShadingRateCombinerOpKHR*[2] combinerOps);
def ProcCmdSetFrontFace = fn void(CommandBuffer commandBuffer, FrontFace frontFace);
def ProcCmdSetFrontFaceEXT = fn void(CommandBuffer commandBuffer, FrontFace frontFace);
def ProcCmdSetLineRasterizationModeEXT = fn void(CommandBuffer commandBuffer, LineRasterizationModeEXT lineRasterizationMode);
def ProcCmdSetLineStipple = fn void(CommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern);
def ProcCmdSetLineStippleEXT = fn void(CommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern);
def ProcCmdSetLineStippleEnableEXT = fn void(CommandBuffer commandBuffer, uint stippledLineEnable);
def ProcCmdSetLineStippleKHR = fn void(CommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern);
def ProcCmdSetLineWidth = fn void(CommandBuffer commandBuffer, float lineWidth);
def ProcCmdSetLogicOpEXT = fn void(CommandBuffer commandBuffer, LogicOp logicOp);
def ProcCmdSetLogicOpEnableEXT = fn void(CommandBuffer commandBuffer, uint logicOpEnable);
def ProcCmdSetPatchControlPointsEXT = fn void(CommandBuffer commandBuffer, uint patchControlPoints);
def ProcCmdSetPerformanceMarkerINTEL = fn Result(CommandBuffer commandBuffer, PerformanceMarkerInfoINTEL* pMarkerInfo);
def ProcCmdSetPerformanceOverrideINTEL = fn Result(CommandBuffer commandBuffer, PerformanceOverrideInfoINTEL* pOverrideInfo);
def ProcCmdSetPerformanceStreamMarkerINTEL = fn Result(CommandBuffer commandBuffer, PerformanceStreamMarkerInfoINTEL* pMarkerInfo);
def ProcCmdSetPolygonModeEXT = fn void(CommandBuffer commandBuffer, PolygonMode polygonMode);
def ProcCmdSetPrimitiveRestartEnable = fn void(CommandBuffer commandBuffer, uint primitiveRestartEnable);
def ProcCmdSetPrimitiveRestartEnableEXT = fn void(CommandBuffer commandBuffer, uint primitiveRestartEnable);
def ProcCmdSetPrimitiveTopology = fn void(CommandBuffer commandBuffer, PrimitiveTopology primitiveTopology);
def ProcCmdSetPrimitiveTopologyEXT = fn void(CommandBuffer commandBuffer, PrimitiveTopology primitiveTopology);
def ProcCmdSetProvokingVertexModeEXT = fn void(CommandBuffer commandBuffer, ProvokingVertexModeEXT provokingVertexMode);
def ProcCmdSetRasterizationSamplesEXT = fn void(CommandBuffer commandBuffer, SampleCountFlags rasterizationSamples);
def ProcCmdSetRasterizationStreamEXT = fn void(CommandBuffer commandBuffer, uint rasterizationStream);
def ProcCmdSetRasterizerDiscardEnable = fn void(CommandBuffer commandBuffer, uint rasterizerDiscardEnable);
def ProcCmdSetRasterizerDiscardEnableEXT = fn void(CommandBuffer commandBuffer, uint rasterizerDiscardEnable);
def ProcCmdSetRayTracingPipelineStackSizeKHR = fn void(CommandBuffer commandBuffer, uint pipelineStackSize);
def ProcCmdSetRenderingAttachmentLocations = fn void(CommandBuffer commandBuffer, RenderingAttachmentLocationInfo* pLocationInfo);
def ProcCmdSetRenderingAttachmentLocationsKHR = fn void(CommandBuffer commandBuffer, RenderingAttachmentLocationInfo* pLocationInfo);
def ProcCmdSetRenderingInputAttachmentIndices = fn void(CommandBuffer commandBuffer, RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo);
def ProcCmdSetRenderingInputAttachmentIndicesKHR = fn void(CommandBuffer commandBuffer, RenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo);
def ProcCmdSetRepresentativeFragmentTestEnableNV = fn void(CommandBuffer commandBuffer, uint representativeFragmentTestEnable);
def ProcCmdSetSampleLocationsEXT = fn void(CommandBuffer commandBuffer, SampleLocationsInfoEXT* pSampleLocationsInfo);
def ProcCmdSetSampleLocationsEnableEXT = fn void(CommandBuffer commandBuffer, uint sampleLocationsEnable);
def ProcCmdSetSampleMaskEXT = fn void(CommandBuffer commandBuffer, SampleCountFlags samples, SampleMask* pSampleMask);
def ProcCmdSetScissor = fn void(CommandBuffer commandBuffer, uint firstScissor, uint scissorCount, Rect2D* pScissors);
def ProcCmdSetScissorWithCount = fn void(CommandBuffer commandBuffer, uint scissorCount, Rect2D* pScissors);
def ProcCmdSetScissorWithCountEXT = fn void(CommandBuffer commandBuffer, uint scissorCount, Rect2D* pScissors);
def ProcCmdSetShadingRateImageEnableNV = fn void(CommandBuffer commandBuffer, uint shadingRateImageEnable);
def ProcCmdSetStencilCompareMask = fn void(CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint compareMask);
def ProcCmdSetStencilOp = fn void(CommandBuffer commandBuffer, StencilFaceFlags faceMask, StencilOp failOp, StencilOp passOp, StencilOp depthFailOp, CompareOp compareOp);
def ProcCmdSetStencilOpEXT = fn void(CommandBuffer commandBuffer, StencilFaceFlags faceMask, StencilOp failOp, StencilOp passOp, StencilOp depthFailOp, CompareOp compareOp);
def ProcCmdSetStencilReference = fn void(CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint reference);
def ProcCmdSetStencilTestEnable = fn void(CommandBuffer commandBuffer, uint stencilTestEnable);
def ProcCmdSetStencilTestEnableEXT = fn void(CommandBuffer commandBuffer, uint stencilTestEnable);
def ProcCmdSetStencilWriteMask = fn void(CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint writeMask);
def ProcCmdSetTessellationDomainOriginEXT = fn void(CommandBuffer commandBuffer, TessellationDomainOrigin domainOrigin);
def ProcCmdSetVertexInputEXT = fn void(CommandBuffer commandBuffer, uint vertexBindingDescriptionCount, VertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint vertexAttributeDescriptionCount, VertexInputAttributeDescription2EXT* pVertexAttributeDescriptions);
def ProcCmdSetViewport = fn void(CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, Viewport* pViewports);
def ProcCmdSetViewportShadingRatePaletteNV = fn void(CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ShadingRatePaletteNV* pShadingRatePalettes);
def ProcCmdSetViewportSwizzleNV = fn void(CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ViewportSwizzleNV* pViewportSwizzles);
def ProcCmdSetViewportWScalingEnableNV = fn void(CommandBuffer commandBuffer, uint viewportWScalingEnable);
def ProcCmdSetViewportWScalingNV = fn void(CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ViewportWScalingNV* pViewportWScalings);
def ProcCmdSetViewportWithCount = fn void(CommandBuffer commandBuffer, uint viewportCount, Viewport* pViewports);
def ProcCmdSetViewportWithCountEXT = fn void(CommandBuffer commandBuffer, uint viewportCount, Viewport* pViewports);
def ProcCmdSubpassShadingHUAWEI = fn void(CommandBuffer commandBuffer);
def ProcCmdTraceRaysIndirect2KHR = fn void(CommandBuffer commandBuffer, DeviceAddress indirectDeviceAddress);
def ProcCmdTraceRaysIndirectKHR = fn void(CommandBuffer commandBuffer, StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, StridedDeviceAddressRegionKHR* pMissShaderBindingTable, StridedDeviceAddressRegionKHR* pHitShaderBindingTable, StridedDeviceAddressRegionKHR* pCallableShaderBindingTable, DeviceAddress indirectDeviceAddress);
def ProcCmdTraceRaysKHR = fn void(CommandBuffer commandBuffer, StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, StridedDeviceAddressRegionKHR* pMissShaderBindingTable, StridedDeviceAddressRegionKHR* pHitShaderBindingTable, StridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint width, uint height, uint depth);
def ProcCmdTraceRaysNV = fn void(CommandBuffer commandBuffer, Buffer raygenShaderBindingTableBuffer, DeviceSize raygenShaderBindingOffset, Buffer missShaderBindingTableBuffer, DeviceSize missShaderBindingOffset, DeviceSize missShaderBindingStride, Buffer hitShaderBindingTableBuffer, DeviceSize hitShaderBindingOffset, DeviceSize hitShaderBindingStride, Buffer callableShaderBindingTableBuffer, DeviceSize callableShaderBindingOffset, DeviceSize callableShaderBindingStride, uint width, uint height, uint depth);
def ProcCmdUpdateBuffer = fn void(CommandBuffer commandBuffer, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize dataSize, void* pData);
def ProcCmdUpdatePipelineIndirectBufferNV = fn void(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, Pipeline pipeline);
def ProcCmdWaitEvents = fn void(CommandBuffer commandBuffer, uint eventCount, Event* pEvents, PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, uint memoryBarrierCount, MemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, BufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, ImageMemoryBarrier* pImageMemoryBarriers);
def ProcCmdWaitEvents2 = fn void(CommandBuffer commandBuffer, uint eventCount, Event* pEvents, DependencyInfo* pDependencyInfos);
def ProcCmdWaitEvents2KHR = fn void(CommandBuffer commandBuffer, uint eventCount, Event* pEvents, DependencyInfo* pDependencyInfos);
def ProcCmdWriteAccelerationStructuresPropertiesKHR = fn void(CommandBuffer commandBuffer, uint accelerationStructureCount, AccelerationStructureKHR* pAccelerationStructures, QueryType queryType, QueryPool queryPool, uint firstQuery);
def ProcCmdWriteAccelerationStructuresPropertiesNV = fn void(CommandBuffer commandBuffer, uint accelerationStructureCount, AccelerationStructureNV* pAccelerationStructures, QueryType queryType, QueryPool queryPool, uint firstQuery);
def ProcCmdWriteBufferMarker2AMD = fn void(CommandBuffer commandBuffer, PipelineStageFlags2 stage, Buffer dstBuffer, DeviceSize dstOffset, uint marker);
def ProcCmdWriteBufferMarkerAMD = fn void(CommandBuffer commandBuffer, PipelineStageFlags pipelineStage, Buffer dstBuffer, DeviceSize dstOffset, uint marker);
def ProcCmdWriteMicromapsPropertiesEXT = fn void(CommandBuffer commandBuffer, uint micromapCount, MicromapEXT* pMicromaps, QueryType queryType, QueryPool queryPool, uint firstQuery);
def ProcCmdWriteTimestamp = fn void(CommandBuffer commandBuffer, PipelineStageFlags pipelineStage, QueryPool queryPool, uint query);
def ProcCmdWriteTimestamp2 = fn void(CommandBuffer commandBuffer, PipelineStageFlags2 stage, QueryPool queryPool, uint query);
def ProcCmdWriteTimestamp2KHR = fn void(CommandBuffer commandBuffer, PipelineStageFlags2 stage, QueryPool queryPool, uint query);
def ProcCompileDeferredNV = fn Result(Device device, Pipeline pipeline, uint shader);
def ProcConvertCooperativeVectorMatrixNV = fn Result(Device device, ConvertCooperativeVectorMatrixInfoNV* pInfo);
def ProcCopyAccelerationStructureKHR = fn Result(Device device, DeferredOperationKHR deferredOperation, CopyAccelerationStructureInfoKHR* pInfo);
def ProcCopyAccelerationStructureToMemoryKHR = fn Result(Device device, DeferredOperationKHR deferredOperation, CopyAccelerationStructureToMemoryInfoKHR* pInfo);
def ProcCopyImageToImage = fn Result(Device device, CopyImageToImageInfo* pCopyImageToImageInfo);
def ProcCopyImageToImageEXT = fn Result(Device device, CopyImageToImageInfo* pCopyImageToImageInfo);
def ProcCopyImageToMemory = fn Result(Device device, CopyImageToMemoryInfo* pCopyImageToMemoryInfo);
def ProcCopyImageToMemoryEXT = fn Result(Device device, CopyImageToMemoryInfo* pCopyImageToMemoryInfo);
def ProcCopyMemoryToAccelerationStructureKHR = fn Result(Device device, DeferredOperationKHR deferredOperation, CopyMemoryToAccelerationStructureInfoKHR* pInfo);
def ProcCopyMemoryToImage = fn Result(Device device, CopyMemoryToImageInfo* pCopyMemoryToImageInfo);
def ProcCopyMemoryToImageEXT = fn Result(Device device, CopyMemoryToImageInfo* pCopyMemoryToImageInfo);
def ProcCopyMemoryToMicromapEXT = fn Result(Device device, DeferredOperationKHR deferredOperation, CopyMemoryToMicromapInfoEXT* pInfo);
def ProcCopyMicromapEXT = fn Result(Device device, DeferredOperationKHR deferredOperation, CopyMicromapInfoEXT* pInfo);
def ProcCopyMicromapToMemoryEXT = fn Result(Device device, DeferredOperationKHR deferredOperation, CopyMicromapToMemoryInfoEXT* pInfo);
def ProcCreateAccelerationStructureKHR = fn Result(Device device, AccelerationStructureCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, AccelerationStructureKHR* pAccelerationStructure);
def ProcCreateAccelerationStructureNV = fn Result(Device device, AccelerationStructureCreateInfoNV* pCreateInfo, AllocationCallbacks* pAllocator, AccelerationStructureNV* pAccelerationStructure);
def ProcCreateBuffer = fn Result(Device device, BufferCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Buffer* pBuffer);
def ProcCreateBufferView = fn Result(Device device, BufferViewCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, BufferView* pView);
def ProcCreateCommandPool = fn Result(Device device, CommandPoolCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, CommandPool* pCommandPool);
def ProcCreateComputePipelines = fn Result(Device device, PipelineCache pipelineCache, uint createInfoCount, ComputePipelineCreateInfo* pCreateInfos, AllocationCallbacks* pAllocator, Pipeline* pPipelines);
def ProcCreateCuFunctionNVX = fn Result(Device device, CuFunctionCreateInfoNVX* pCreateInfo, AllocationCallbacks* pAllocator, CuFunctionNVX* pFunction);
def ProcCreateCuModuleNVX = fn Result(Device device, CuModuleCreateInfoNVX* pCreateInfo, AllocationCallbacks* pAllocator, CuModuleNVX* pModule);
def ProcCreateCudaFunctionNV = fn Result(Device device, CudaFunctionCreateInfoNV* pCreateInfo, AllocationCallbacks* pAllocator, CudaFunctionNV* pFunction);
def ProcCreateCudaModuleNV = fn Result(Device device, CudaModuleCreateInfoNV* pCreateInfo, AllocationCallbacks* pAllocator, CudaModuleNV* pModule);
def ProcCreateDeferredOperationKHR = fn Result(Device device, AllocationCallbacks* pAllocator, DeferredOperationKHR* pDeferredOperation);
def ProcCreateDescriptorPool = fn Result(Device device, DescriptorPoolCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, DescriptorPool* pDescriptorPool);
def ProcCreateDescriptorSetLayout = fn Result(Device device, DescriptorSetLayoutCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, DescriptorSetLayout* pSetLayout);
def ProcCreateDescriptorUpdateTemplate = fn Result(Device device, DescriptorUpdateTemplateCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, DescriptorUpdateTemplate* pDescriptorUpdateTemplate);
def ProcCreateDescriptorUpdateTemplateKHR = fn Result(Device device, DescriptorUpdateTemplateCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, DescriptorUpdateTemplate* pDescriptorUpdateTemplate);
def ProcCreateEvent = fn Result(Device device, EventCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Event* pEvent);
def ProcCreateFence = fn Result(Device device, FenceCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Fence* pFence);
def ProcCreateFramebuffer = fn Result(Device device, FramebufferCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Framebuffer* pFramebuffer);
def ProcCreateGraphicsPipelines = fn Result(Device device, PipelineCache pipelineCache, uint createInfoCount, GraphicsPipelineCreateInfo* pCreateInfos, AllocationCallbacks* pAllocator, Pipeline* pPipelines);
def ProcCreateImage = fn Result(Device device, ImageCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Image* pImage);
def ProcCreateImageView = fn Result(Device device, ImageViewCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, ImageView* pView);
def ProcCreateIndirectCommandsLayoutEXT = fn Result(Device device, IndirectCommandsLayoutCreateInfoEXT* pCreateInfo, AllocationCallbacks* pAllocator, IndirectCommandsLayoutEXT* pIndirectCommandsLayout);
def ProcCreateIndirectCommandsLayoutNV = fn Result(Device device, IndirectCommandsLayoutCreateInfoNV* pCreateInfo, AllocationCallbacks* pAllocator, IndirectCommandsLayoutNV* pIndirectCommandsLayout);
def ProcCreateIndirectExecutionSetEXT = fn Result(Device device, IndirectExecutionSetCreateInfoEXT* pCreateInfo, AllocationCallbacks* pAllocator, IndirectExecutionSetEXT* pIndirectExecutionSet);
def ProcCreateMicromapEXT = fn Result(Device device, MicromapCreateInfoEXT* pCreateInfo, AllocationCallbacks* pAllocator, MicromapEXT* pMicromap);
def ProcCreateOpticalFlowSessionNV = fn Result(Device device, OpticalFlowSessionCreateInfoNV* pCreateInfo, AllocationCallbacks* pAllocator, OpticalFlowSessionNV* pSession);
def ProcCreatePipelineBinariesKHR = fn Result(Device device, PipelineBinaryCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, PipelineBinaryHandlesInfoKHR* pBinaries);
def ProcCreatePipelineCache = fn Result(Device device, PipelineCacheCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, PipelineCache* pPipelineCache);
def ProcCreatePipelineLayout = fn Result(Device device, PipelineLayoutCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, PipelineLayout* pPipelineLayout);
def ProcCreatePrivateDataSlot = fn Result(Device device, PrivateDataSlotCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, PrivateDataSlot* pPrivateDataSlot);
def ProcCreatePrivateDataSlotEXT = fn Result(Device device, PrivateDataSlotCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, PrivateDataSlot* pPrivateDataSlot);
def ProcCreateQueryPool = fn Result(Device device, QueryPoolCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, QueryPool* pQueryPool);
def ProcCreateRayTracingPipelinesKHR = fn Result(Device device, DeferredOperationKHR deferredOperation, PipelineCache pipelineCache, uint createInfoCount, RayTracingPipelineCreateInfoKHR* pCreateInfos, AllocationCallbacks* pAllocator, Pipeline* pPipelines);
def ProcCreateRayTracingPipelinesNV = fn Result(Device device, PipelineCache pipelineCache, uint createInfoCount, RayTracingPipelineCreateInfoNV* pCreateInfos, AllocationCallbacks* pAllocator, Pipeline* pPipelines);
def ProcCreateRenderPass = fn Result(Device device, RenderPassCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, RenderPass* pRenderPass);
def ProcCreateRenderPass2 = fn Result(Device device, RenderPassCreateInfo2* pCreateInfo, AllocationCallbacks* pAllocator, RenderPass* pRenderPass);
def ProcCreateRenderPass2KHR = fn Result(Device device, RenderPassCreateInfo2* pCreateInfo, AllocationCallbacks* pAllocator, RenderPass* pRenderPass);
def ProcCreateSampler = fn Result(Device device, SamplerCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Sampler* pSampler);
def ProcCreateSamplerYcbcrConversion = fn Result(Device device, SamplerYcbcrConversionCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, SamplerYcbcrConversion* pYcbcrConversion);
def ProcCreateSamplerYcbcrConversionKHR = fn Result(Device device, SamplerYcbcrConversionCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, SamplerYcbcrConversion* pYcbcrConversion);
def ProcCreateSemaphore = fn Result(Device device, SemaphoreCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Semaphore* pSemaphore);
def ProcCreateShaderModule = fn Result(Device device, ShaderModuleCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, ShaderModule* pShaderModule);
def ProcCreateShadersEXT = fn Result(Device device, uint createInfoCount, ShaderCreateInfoEXT* pCreateInfos, AllocationCallbacks* pAllocator, ShaderEXT* pShaders);
def ProcCreateSharedSwapchainsKHR = fn Result(Device device, uint swapchainCount, SwapchainCreateInfoKHR* pCreateInfos, AllocationCallbacks* pAllocator, SwapchainKHR* pSwapchains);
def ProcCreateSwapchainKHR = fn Result(Device device, SwapchainCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, SwapchainKHR* pSwapchain);
def ProcCreateValidationCacheEXT = fn Result(Device device, ValidationCacheCreateInfoEXT* pCreateInfo, AllocationCallbacks* pAllocator, ValidationCacheEXT* pValidationCache);
def ProcCreateVideoSessionKHR = fn Result(Device device, VideoSessionCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, VideoSessionKHR* pVideoSession);
def ProcCreateVideoSessionParametersKHR = fn Result(Device device, VideoSessionParametersCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, VideoSessionParametersKHR* pVideoSessionParameters);
def ProcDebugMarkerSetObjectNameEXT = fn Result(Device device, DebugMarkerObjectNameInfoEXT* pNameInfo);
def ProcDebugMarkerSetObjectTagEXT = fn Result(Device device, DebugMarkerObjectTagInfoEXT* pTagInfo);
def ProcDeferredOperationJoinKHR = fn Result(Device device, DeferredOperationKHR operation);
def ProcDestroyAccelerationStructureKHR = fn void(Device device, AccelerationStructureKHR accelerationStructure, AllocationCallbacks* pAllocator);
def ProcDestroyAccelerationStructureNV = fn void(Device device, AccelerationStructureNV accelerationStructure, AllocationCallbacks* pAllocator);
def ProcDestroyBuffer = fn void(Device device, Buffer buffer, AllocationCallbacks* pAllocator);
def ProcDestroyBufferView = fn void(Device device, BufferView bufferView, AllocationCallbacks* pAllocator);
def ProcDestroyCommandPool = fn void(Device device, CommandPool commandPool, AllocationCallbacks* pAllocator);
def ProcDestroyCuFunctionNVX = fn void(Device device, CuFunctionNVX function, AllocationCallbacks* pAllocator);
def ProcDestroyCuModuleNVX = fn void(Device device, CuModuleNVX module_, AllocationCallbacks* pAllocator);
def ProcDestroyCudaFunctionNV = fn void(Device device, CudaFunctionNV function, AllocationCallbacks* pAllocator);
def ProcDestroyCudaModuleNV = fn void(Device device, CudaModuleNV module_, AllocationCallbacks* pAllocator);
def ProcDestroyDeferredOperationKHR = fn void(Device device, DeferredOperationKHR operation, AllocationCallbacks* pAllocator);
def ProcDestroyDescriptorPool = fn void(Device device, DescriptorPool descriptorPool, AllocationCallbacks* pAllocator);
def ProcDestroyDescriptorSetLayout = fn void(Device device, DescriptorSetLayout descriptorSetLayout, AllocationCallbacks* pAllocator);
def ProcDestroyDescriptorUpdateTemplate = fn void(Device device, DescriptorUpdateTemplate descriptorUpdateTemplate, AllocationCallbacks* pAllocator);
def ProcDestroyDescriptorUpdateTemplateKHR = fn void(Device device, DescriptorUpdateTemplate descriptorUpdateTemplate, AllocationCallbacks* pAllocator);
def ProcDestroyDevice = fn void(Device device, AllocationCallbacks* pAllocator);
def ProcDestroyEvent = fn void(Device device, Event event, AllocationCallbacks* pAllocator);
def ProcDestroyFence = fn void(Device device, Fence fence, AllocationCallbacks* pAllocator);
def ProcDestroyFramebuffer = fn void(Device device, Framebuffer framebuffer, AllocationCallbacks* pAllocator);
def ProcDestroyImage = fn void(Device device, Image image, AllocationCallbacks* pAllocator);
def ProcDestroyImageView = fn void(Device device, ImageView imageView, AllocationCallbacks* pAllocator);
def ProcDestroyIndirectCommandsLayoutEXT = fn void(Device device, IndirectCommandsLayoutEXT indirectCommandsLayout, AllocationCallbacks* pAllocator);
def ProcDestroyIndirectCommandsLayoutNV = fn void(Device device, IndirectCommandsLayoutNV indirectCommandsLayout, AllocationCallbacks* pAllocator);
def ProcDestroyIndirectExecutionSetEXT = fn void(Device device, IndirectExecutionSetEXT indirectExecutionSet, AllocationCallbacks* pAllocator);
def ProcDestroyMicromapEXT = fn void(Device device, MicromapEXT micromap, AllocationCallbacks* pAllocator);
def ProcDestroyOpticalFlowSessionNV = fn void(Device device, OpticalFlowSessionNV session, AllocationCallbacks* pAllocator);
def ProcDestroyPipeline = fn void(Device device, Pipeline pipeline, AllocationCallbacks* pAllocator);
def ProcDestroyPipelineBinaryKHR = fn void(Device device, PipelineBinaryKHR pipelineBinary, AllocationCallbacks* pAllocator);
def ProcDestroyPipelineCache = fn void(Device device, PipelineCache pipelineCache, AllocationCallbacks* pAllocator);
def ProcDestroyPipelineLayout = fn void(Device device, PipelineLayout pipelineLayout, AllocationCallbacks* pAllocator);
def ProcDestroyPrivateDataSlot = fn void(Device device, PrivateDataSlot privateDataSlot, AllocationCallbacks* pAllocator);
def ProcDestroyPrivateDataSlotEXT = fn void(Device device, PrivateDataSlot privateDataSlot, AllocationCallbacks* pAllocator);
def ProcDestroyQueryPool = fn void(Device device, QueryPool queryPool, AllocationCallbacks* pAllocator);
def ProcDestroyRenderPass = fn void(Device device, RenderPass renderPass, AllocationCallbacks* pAllocator);
def ProcDestroySampler = fn void(Device device, Sampler sampler, AllocationCallbacks* pAllocator);
def ProcDestroySamplerYcbcrConversion = fn void(Device device, SamplerYcbcrConversion ycbcrConversion, AllocationCallbacks* pAllocator);
def ProcDestroySamplerYcbcrConversionKHR = fn void(Device device, SamplerYcbcrConversion ycbcrConversion, AllocationCallbacks* pAllocator);
def ProcDestroySemaphore = fn void(Device device, Semaphore semaphore, AllocationCallbacks* pAllocator);
def ProcDestroyShaderEXT = fn void(Device device, ShaderEXT shader, AllocationCallbacks* pAllocator);
def ProcDestroyShaderModule = fn void(Device device, ShaderModule shaderModule, AllocationCallbacks* pAllocator);
def ProcDestroySwapchainKHR = fn void(Device device, SwapchainKHR swapchain, AllocationCallbacks* pAllocator);
def ProcDestroyValidationCacheEXT = fn void(Device device, ValidationCacheEXT validationCache, AllocationCallbacks* pAllocator);
def ProcDestroyVideoSessionKHR = fn void(Device device, VideoSessionKHR videoSession, AllocationCallbacks* pAllocator);
def ProcDestroyVideoSessionParametersKHR = fn void(Device device, VideoSessionParametersKHR videoSessionParameters, AllocationCallbacks* pAllocator);
def ProcDeviceWaitIdle = fn Result(Device device);
def ProcDisplayPowerControlEXT = fn Result(Device device, DisplayKHR display, DisplayPowerInfoEXT* pDisplayPowerInfo);
def ProcEndCommandBuffer = fn Result(CommandBuffer commandBuffer);
def ProcExportMetalObjectsEXT = fn void(Device device, ExportMetalObjectsInfoEXT* pMetalObjectsInfo);
def ProcFlushMappedMemoryRanges = fn Result(Device device, uint memoryRangeCount, MappedMemoryRange* pMemoryRanges);
def ProcFreeCommandBuffers = fn void(Device device, CommandPool commandPool, uint commandBufferCount, CommandBuffer* pCommandBuffers);
def ProcFreeDescriptorSets = fn Result(Device device, DescriptorPool descriptorPool, uint descriptorSetCount, DescriptorSet* pDescriptorSets);
def ProcFreeMemory = fn void(Device device, DeviceMemory memory, AllocationCallbacks* pAllocator);
def ProcGetAccelerationStructureBuildSizesKHR = fn void(Device device, AccelerationStructureBuildTypeKHR buildType, AccelerationStructureBuildGeometryInfoKHR* pBuildInfo, uint* pMaxPrimitiveCounts, AccelerationStructureBuildSizesInfoKHR* pSizeInfo);
def ProcGetAccelerationStructureDeviceAddressKHR = fn DeviceAddress(Device device, AccelerationStructureDeviceAddressInfoKHR* pInfo);
def ProcGetAccelerationStructureHandleNV = fn Result(Device device, AccelerationStructureNV accelerationStructure, usz dataSize, void* pData);
def ProcGetAccelerationStructureMemoryRequirementsNV = fn void(Device device, AccelerationStructureMemoryRequirementsInfoNV* pInfo, MemoryRequirements2KHR* pMemoryRequirements);
def ProcGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = fn Result(Device device, AccelerationStructureCaptureDescriptorDataInfoEXT* pInfo, void* pData);
def ProcGetBufferDeviceAddress = fn DeviceAddress(Device device, BufferDeviceAddressInfo* pInfo);
def ProcGetBufferDeviceAddressEXT = fn DeviceAddress(Device device, BufferDeviceAddressInfo* pInfo);
def ProcGetBufferDeviceAddressKHR = fn DeviceAddress(Device device, BufferDeviceAddressInfo* pInfo);
def ProcGetBufferMemoryRequirements = fn void(Device device, Buffer buffer, MemoryRequirements* pMemoryRequirements);
def ProcGetBufferMemoryRequirements2 = fn void(Device device, BufferMemoryRequirementsInfo2* pInfo, MemoryRequirements2* pMemoryRequirements);
def ProcGetBufferMemoryRequirements2KHR = fn void(Device device, BufferMemoryRequirementsInfo2* pInfo, MemoryRequirements2* pMemoryRequirements);
def ProcGetBufferOpaqueCaptureAddress = fn ulong(Device device, BufferDeviceAddressInfo* pInfo);
def ProcGetBufferOpaqueCaptureAddressKHR = fn ulong(Device device, BufferDeviceAddressInfo* pInfo);
def ProcGetBufferOpaqueCaptureDescriptorDataEXT = fn Result(Device device, BufferCaptureDescriptorDataInfoEXT* pInfo, void* pData);
def ProcGetCalibratedTimestampsEXT = fn Result(Device device, uint timestampCount, CalibratedTimestampInfoKHR* pTimestampInfos, ulong* pTimestamps, ulong* pMaxDeviation);
def ProcGetCalibratedTimestampsKHR = fn Result(Device device, uint timestampCount, CalibratedTimestampInfoKHR* pTimestampInfos, ulong* pTimestamps, ulong* pMaxDeviation);
def ProcGetClusterAccelerationStructureBuildSizesNV = fn void(Device device, ClusterAccelerationStructureInputInfoNV* pInfo, AccelerationStructureBuildSizesInfoKHR* pSizeInfo);
def ProcGetCudaModuleCacheNV = fn Result(Device device, CudaModuleNV module_, usz* pCacheSize, void* pCacheData);
def ProcGetDeferredOperationMaxConcurrencyKHR = fn uint(Device device, DeferredOperationKHR operation);
def ProcGetDeferredOperationResultKHR = fn Result(Device device, DeferredOperationKHR operation);
def ProcGetDescriptorEXT = fn void(Device device, DescriptorGetInfoEXT* pDescriptorInfo, usz dataSize, void* pDescriptor);
def ProcGetDescriptorSetHostMappingVALVE = fn void(Device device, DescriptorSet descriptorSet, void** ppData);
def ProcGetDescriptorSetLayoutBindingOffsetEXT = fn void(Device device, DescriptorSetLayout layout, uint binding, DeviceSize* pOffset);
def ProcGetDescriptorSetLayoutHostMappingInfoVALVE = fn void(Device device, DescriptorSetBindingReferenceVALVE* pBindingReference, DescriptorSetLayoutHostMappingInfoVALVE* pHostMapping);
def ProcGetDescriptorSetLayoutSizeEXT = fn void(Device device, DescriptorSetLayout layout, DeviceSize* pLayoutSizeInBytes);
def ProcGetDescriptorSetLayoutSupport = fn void(Device device, DescriptorSetLayoutCreateInfo* pCreateInfo, DescriptorSetLayoutSupport* pSupport);
def ProcGetDescriptorSetLayoutSupportKHR = fn void(Device device, DescriptorSetLayoutCreateInfo* pCreateInfo, DescriptorSetLayoutSupport* pSupport);
def ProcGetDeviceAccelerationStructureCompatibilityKHR = fn void(Device device, AccelerationStructureVersionInfoKHR* pVersionInfo, AccelerationStructureCompatibilityKHR* pCompatibility);
def ProcGetDeviceBufferMemoryRequirements = fn void(Device device, DeviceBufferMemoryRequirements* pInfo, MemoryRequirements2* pMemoryRequirements);
def ProcGetDeviceBufferMemoryRequirementsKHR = fn void(Device device, DeviceBufferMemoryRequirements* pInfo, MemoryRequirements2* pMemoryRequirements);
def ProcGetDeviceFaultInfoEXT = fn Result(Device device, DeviceFaultCountsEXT* pFaultCounts, DeviceFaultInfoEXT* pFaultInfo);
def ProcGetDeviceGroupPeerMemoryFeatures = fn void(Device device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, PeerMemoryFeatureFlags* pPeerMemoryFeatures);
def ProcGetDeviceGroupPeerMemoryFeaturesKHR = fn void(Device device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, PeerMemoryFeatureFlags* pPeerMemoryFeatures);
def ProcGetDeviceGroupPresentCapabilitiesKHR = fn Result(Device device, DeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities);
def ProcGetDeviceGroupSurfacePresentModes2EXT = fn Result(Device device, PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, DeviceGroupPresentModeFlagsKHR* pModes);
def ProcGetDeviceGroupSurfacePresentModesKHR = fn Result(Device device, SurfaceKHR surface, DeviceGroupPresentModeFlagsKHR* pModes);
def ProcGetDeviceImageMemoryRequirements = fn void(Device device, DeviceImageMemoryRequirements* pInfo, MemoryRequirements2* pMemoryRequirements);
def ProcGetDeviceImageMemoryRequirementsKHR = fn void(Device device, DeviceImageMemoryRequirements* pInfo, MemoryRequirements2* pMemoryRequirements);
def ProcGetDeviceImageSparseMemoryRequirements = fn void(Device device, DeviceImageMemoryRequirements* pInfo, uint* pSparseMemoryRequirementCount, SparseImageMemoryRequirements2* pSparseMemoryRequirements);
def ProcGetDeviceImageSparseMemoryRequirementsKHR = fn void(Device device, DeviceImageMemoryRequirements* pInfo, uint* pSparseMemoryRequirementCount, SparseImageMemoryRequirements2* pSparseMemoryRequirements);
def ProcGetDeviceImageSubresourceLayout = fn void(Device device, DeviceImageSubresourceInfo* pInfo, SubresourceLayout2* pLayout);
def ProcGetDeviceImageSubresourceLayoutKHR = fn void(Device device, DeviceImageSubresourceInfo* pInfo, SubresourceLayout2* pLayout);
def ProcGetDeviceMemoryCommitment = fn void(Device device, DeviceMemory memory, DeviceSize* pCommittedMemoryInBytes);
def ProcGetDeviceMemoryOpaqueCaptureAddress = fn ulong(Device device, DeviceMemoryOpaqueCaptureAddressInfo* pInfo);
def ProcGetDeviceMemoryOpaqueCaptureAddressKHR = fn ulong(Device device, DeviceMemoryOpaqueCaptureAddressInfo* pInfo);
def ProcGetDeviceMicromapCompatibilityEXT = fn void(Device device, MicromapVersionInfoEXT* pVersionInfo, AccelerationStructureCompatibilityKHR* pCompatibility);
def ProcGetDeviceProcAddr = fn ProcVoidFunction(Device device, ZString pName);
def ProcGetDeviceQueue = fn void(Device device, uint queueFamilyIndex, uint queueIndex, Queue* pQueue);
def ProcGetDeviceQueue2 = fn void(Device device, DeviceQueueInfo2* pQueueInfo, Queue* pQueue);
def ProcGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = fn Result(Device device, RenderPass renderpass, Extent2D* pMaxWorkgroupSize);
def ProcGetDynamicRenderingTilePropertiesQCOM = fn Result(Device device, RenderingInfo* pRenderingInfo, TilePropertiesQCOM* pProperties);
def ProcGetEncodedVideoSessionParametersKHR = fn Result(Device device, VideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo, VideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo, usz* pDataSize, void* pData);
def ProcGetEventStatus = fn Result(Device device, Event event);
def ProcGetFenceFdKHR = fn Result(Device device, FenceGetFdInfoKHR* pGetFdInfo, CInt* pFd);
def ProcGetFenceStatus = fn Result(Device device, Fence fence);
def ProcGetFenceWin32HandleKHR = fn Result(Device device, FenceGetWin32HandleInfoKHR* pGetWin32HandleInfo, Win32_HANDLE* pHandle);
def ProcGetFramebufferTilePropertiesQCOM = fn Result(Device device, Framebuffer framebuffer, uint* pPropertiesCount, TilePropertiesQCOM* pProperties);
def ProcGetGeneratedCommandsMemoryRequirementsEXT = fn void(Device device, GeneratedCommandsMemoryRequirementsInfoEXT* pInfo, MemoryRequirements2* pMemoryRequirements);
def ProcGetGeneratedCommandsMemoryRequirementsNV = fn void(Device device, GeneratedCommandsMemoryRequirementsInfoNV* pInfo, MemoryRequirements2* pMemoryRequirements);
def ProcGetImageDrmFormatModifierPropertiesEXT = fn Result(Device device, Image image, ImageDrmFormatModifierPropertiesEXT* pProperties);
def ProcGetImageMemoryRequirements = fn void(Device device, Image image, MemoryRequirements* pMemoryRequirements);
def ProcGetImageMemoryRequirements2 = fn void(Device device, ImageMemoryRequirementsInfo2* pInfo, MemoryRequirements2* pMemoryRequirements);
def ProcGetImageMemoryRequirements2KHR = fn void(Device device, ImageMemoryRequirementsInfo2* pInfo, MemoryRequirements2* pMemoryRequirements);
def ProcGetImageOpaqueCaptureDescriptorDataEXT = fn Result(Device device, ImageCaptureDescriptorDataInfoEXT* pInfo, void* pData);
def ProcGetImageSparseMemoryRequirements = fn void(Device device, Image image, uint* pSparseMemoryRequirementCount, SparseImageMemoryRequirements* pSparseMemoryRequirements);
def ProcGetImageSparseMemoryRequirements2 = fn void(Device device, ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, SparseImageMemoryRequirements2* pSparseMemoryRequirements);
def ProcGetImageSparseMemoryRequirements2KHR = fn void(Device device, ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, SparseImageMemoryRequirements2* pSparseMemoryRequirements);
def ProcGetImageSubresourceLayout = fn void(Device device, Image image, ImageSubresource* pSubresource, SubresourceLayout* pLayout);
def ProcGetImageSubresourceLayout2 = fn void(Device device, Image image, ImageSubresource2* pSubresource, SubresourceLayout2* pLayout);
def ProcGetImageSubresourceLayout2EXT = fn void(Device device, Image image, ImageSubresource2* pSubresource, SubresourceLayout2* pLayout);
def ProcGetImageSubresourceLayout2KHR = fn void(Device device, Image image, ImageSubresource2* pSubresource, SubresourceLayout2* pLayout);
def ProcGetImageViewAddressNVX = fn Result(Device device, ImageView imageView, ImageViewAddressPropertiesNVX* pProperties);
def ProcGetImageViewHandle64NVX = fn ulong(Device device, ImageViewHandleInfoNVX* pInfo);
def ProcGetImageViewHandleNVX = fn uint(Device device, ImageViewHandleInfoNVX* pInfo);
def ProcGetImageViewOpaqueCaptureDescriptorDataEXT = fn Result(Device device, ImageViewCaptureDescriptorDataInfoEXT* pInfo, void* pData);
def ProcGetLatencyTimingsNV = fn void(Device device, SwapchainKHR swapchain, GetLatencyMarkerInfoNV* pLatencyMarkerInfo);
def ProcGetMemoryFdKHR = fn Result(Device device, MemoryGetFdInfoKHR* pGetFdInfo, CInt* pFd);
def ProcGetMemoryFdPropertiesKHR = fn Result(Device device, ExternalMemoryHandleTypeFlags handleType, CInt fd, MemoryFdPropertiesKHR* pMemoryFdProperties);
def ProcGetMemoryHostPointerPropertiesEXT = fn Result(Device device, ExternalMemoryHandleTypeFlags handleType, void* pHostPointer, MemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties);
def ProcGetMemoryMetalHandleEXT = fn Result(Device device, MemoryGetMetalHandleInfoEXT* pGetMetalHandleInfo, void** pHandle);
def ProcGetMemoryMetalHandlePropertiesEXT = fn Result(Device device, ExternalMemoryHandleTypeFlags handleType, void* pHandle, MemoryMetalHandlePropertiesEXT* pMemoryMetalHandleProperties);
def ProcGetMemoryRemoteAddressNV = fn Result(Device device, MemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, RemoteAddressNV* pAddress);
def ProcGetMemoryWin32HandleKHR = fn Result(Device device, MemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo, Win32_HANDLE* pHandle);
def ProcGetMemoryWin32HandleNV = fn Result(Device device, DeviceMemory memory, ExternalMemoryHandleTypeFlagsNV handleType, Win32_HANDLE* pHandle);
def ProcGetMemoryWin32HandlePropertiesKHR = fn Result(Device device, ExternalMemoryHandleTypeFlags handleType, Win32_HANDLE handle, MemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties);
def ProcGetMicromapBuildSizesEXT = fn void(Device device, AccelerationStructureBuildTypeKHR buildType, MicromapBuildInfoEXT* pBuildInfo, MicromapBuildSizesInfoEXT* pSizeInfo);
def ProcGetPartitionedAccelerationStructuresBuildSizesNV = fn void(Device device, PartitionedAccelerationStructureInstancesInputNV* pInfo, AccelerationStructureBuildSizesInfoKHR* pSizeInfo);
def ProcGetPastPresentationTimingGOOGLE = fn Result(Device device, SwapchainKHR swapchain, uint* pPresentationTimingCount, PastPresentationTimingGOOGLE* pPresentationTimings);
def ProcGetPerformanceParameterINTEL = fn Result(Device device, PerformanceParameterTypeINTEL parameter, PerformanceValueINTEL* pValue);
def ProcGetPipelineBinaryDataKHR = fn Result(Device device, PipelineBinaryDataInfoKHR* pInfo, PipelineBinaryKeyKHR* pPipelineBinaryKey, usz* pPipelineBinaryDataSize, void* pPipelineBinaryData);
def ProcGetPipelineCacheData = fn Result(Device device, PipelineCache pipelineCache, usz* pDataSize, void* pData);
def ProcGetPipelineExecutableInternalRepresentationsKHR = fn Result(Device device, PipelineExecutableInfoKHR* pExecutableInfo, uint* pInternalRepresentationCount, PipelineExecutableInternalRepresentationKHR* pInternalRepresentations);
def ProcGetPipelineExecutablePropertiesKHR = fn Result(Device device, PipelineInfoKHR* pPipelineInfo, uint* pExecutableCount, PipelineExecutablePropertiesKHR* pProperties);
def ProcGetPipelineExecutableStatisticsKHR = fn Result(Device device, PipelineExecutableInfoKHR* pExecutableInfo, uint* pStatisticCount, PipelineExecutableStatisticKHR* pStatistics);
def ProcGetPipelineIndirectDeviceAddressNV = fn DeviceAddress(Device device, PipelineIndirectDeviceAddressInfoNV* pInfo);
def ProcGetPipelineIndirectMemoryRequirementsNV = fn void(Device device, ComputePipelineCreateInfo* pCreateInfo, MemoryRequirements2* pMemoryRequirements);
def ProcGetPipelineKeyKHR = fn Result(Device device, PipelineCreateInfoKHR* pPipelineCreateInfo, PipelineBinaryKeyKHR* pPipelineKey);
def ProcGetPipelinePropertiesEXT = fn Result(Device device, PipelineInfoEXT* pPipelineInfo, BaseOutStructure* pPipelineProperties);
def ProcGetPrivateData = fn void(Device device, ObjectType objectType, ulong objectHandle, PrivateDataSlot privateDataSlot, ulong* pData);
def ProcGetPrivateDataEXT = fn void(Device device, ObjectType objectType, ulong objectHandle, PrivateDataSlot privateDataSlot, ulong* pData);
def ProcGetQueryPoolResults = fn Result(Device device, QueryPool queryPool, uint firstQuery, uint queryCount, usz dataSize, void* pData, DeviceSize stride, QueryResultFlags flags);
def ProcGetQueueCheckpointData2NV = fn void(Queue queue, uint* pCheckpointDataCount, CheckpointData2NV* pCheckpointData);
def ProcGetQueueCheckpointDataNV = fn void(Queue queue, uint* pCheckpointDataCount, CheckpointDataNV* pCheckpointData);
def ProcGetRayTracingCaptureReplayShaderGroupHandlesKHR = fn Result(Device device, Pipeline pipeline, uint firstGroup, uint groupCount, usz dataSize, void* pData);
def ProcGetRayTracingShaderGroupHandlesKHR = fn Result(Device device, Pipeline pipeline, uint firstGroup, uint groupCount, usz dataSize, void* pData);
def ProcGetRayTracingShaderGroupHandlesNV = fn Result(Device device, Pipeline pipeline, uint firstGroup, uint groupCount, usz dataSize, void* pData);
def ProcGetRayTracingShaderGroupStackSizeKHR = fn DeviceSize(Device device, Pipeline pipeline, uint group, ShaderGroupShaderKHR groupShader);
def ProcGetRefreshCycleDurationGOOGLE = fn Result(Device device, SwapchainKHR swapchain, RefreshCycleDurationGOOGLE* pDisplayTimingProperties);
def ProcGetRenderAreaGranularity = fn void(Device device, RenderPass renderPass, Extent2D* pGranularity);
def ProcGetRenderingAreaGranularity = fn void(Device device, RenderingAreaInfo* pRenderingAreaInfo, Extent2D* pGranularity);
def ProcGetRenderingAreaGranularityKHR = fn void(Device device, RenderingAreaInfo* pRenderingAreaInfo, Extent2D* pGranularity);
def ProcGetSamplerOpaqueCaptureDescriptorDataEXT = fn Result(Device device, SamplerCaptureDescriptorDataInfoEXT* pInfo, void* pData);
def ProcGetSemaphoreCounterValue = fn Result(Device device, Semaphore semaphore, ulong* pValue);
def ProcGetSemaphoreCounterValueKHR = fn Result(Device device, Semaphore semaphore, ulong* pValue);
def ProcGetSemaphoreFdKHR = fn Result(Device device, SemaphoreGetFdInfoKHR* pGetFdInfo, CInt* pFd);
def ProcGetSemaphoreWin32HandleKHR = fn Result(Device device, SemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo, Win32_HANDLE* pHandle);
def ProcGetShaderBinaryDataEXT = fn Result(Device device, ShaderEXT shader, usz* pDataSize, void* pData);
def ProcGetShaderInfoAMD = fn Result(Device device, Pipeline pipeline, ShaderStageFlags shaderStage, ShaderInfoTypeAMD infoType, usz* pInfoSize, void* pInfo);
def ProcGetShaderModuleCreateInfoIdentifierEXT = fn void(Device device, ShaderModuleCreateInfo* pCreateInfo, ShaderModuleIdentifierEXT* pIdentifier);
def ProcGetShaderModuleIdentifierEXT = fn void(Device device, ShaderModule shaderModule, ShaderModuleIdentifierEXT* pIdentifier);
def ProcGetSwapchainCounterEXT = fn Result(Device device, SwapchainKHR swapchain, SurfaceCounterFlagsEXT counter, ulong* pCounterValue);
def ProcGetSwapchainImagesKHR = fn Result(Device device, SwapchainKHR swapchain, uint* pSwapchainImageCount, Image* pSwapchainImages);
def ProcGetSwapchainStatusKHR = fn Result(Device device, SwapchainKHR swapchain);
def ProcGetValidationCacheDataEXT = fn Result(Device device, ValidationCacheEXT validationCache, usz* pDataSize, void* pData);
def ProcGetVideoSessionMemoryRequirementsKHR = fn Result(Device device, VideoSessionKHR videoSession, uint* pMemoryRequirementsCount, VideoSessionMemoryRequirementsKHR* pMemoryRequirements);
def ProcImportFenceFdKHR = fn Result(Device device, ImportFenceFdInfoKHR* pImportFenceFdInfo);
def ProcImportFenceWin32HandleKHR = fn Result(Device device, ImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo);
def ProcImportSemaphoreFdKHR = fn Result(Device device, ImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo);
def ProcImportSemaphoreWin32HandleKHR = fn Result(Device device, ImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo);
def ProcInitializePerformanceApiINTEL = fn Result(Device device, InitializePerformanceApiInfoINTEL* pInitializeInfo);
def ProcInvalidateMappedMemoryRanges = fn Result(Device device, uint memoryRangeCount, MappedMemoryRange* pMemoryRanges);
def ProcLatencySleepNV = fn Result(Device device, SwapchainKHR swapchain, LatencySleepInfoNV* pSleepInfo);
def ProcMapMemory = fn Result(Device device, DeviceMemory memory, DeviceSize offset, DeviceSize size, MemoryMapFlags flags, void** ppData);
def ProcMapMemory2 = fn Result(Device device, MemoryMapInfo* pMemoryMapInfo, void** ppData);
def ProcMapMemory2KHR = fn Result(Device device, MemoryMapInfo* pMemoryMapInfo, void** ppData);
def ProcMergePipelineCaches = fn Result(Device device, PipelineCache dstCache, uint srcCacheCount, PipelineCache* pSrcCaches);
def ProcMergeValidationCachesEXT = fn Result(Device device, ValidationCacheEXT dstCache, uint srcCacheCount, ValidationCacheEXT* pSrcCaches);
def ProcQueueBeginDebugUtilsLabelEXT = fn void(Queue queue, DebugUtilsLabelEXT* pLabelInfo);
def ProcQueueBindSparse = fn Result(Queue queue, uint bindInfoCount, BindSparseInfo* pBindInfo, Fence fence);
def ProcQueueEndDebugUtilsLabelEXT = fn void(Queue queue);
def ProcQueueInsertDebugUtilsLabelEXT = fn void(Queue queue, DebugUtilsLabelEXT* pLabelInfo);
def ProcQueueNotifyOutOfBandNV = fn void(Queue queue, OutOfBandQueueTypeInfoNV* pQueueTypeInfo);
def ProcQueuePresentKHR = fn Result(Queue queue, PresentInfoKHR* pPresentInfo);
def ProcQueueSetPerformanceConfigurationINTEL = fn Result(Queue queue, PerformanceConfigurationINTEL configuration);
def ProcQueueSubmit = fn Result(Queue queue, uint submitCount, SubmitInfo* pSubmits, Fence fence);
def ProcQueueSubmit2 = fn Result(Queue queue, uint submitCount, SubmitInfo2* pSubmits, Fence fence);
def ProcQueueSubmit2KHR = fn Result(Queue queue, uint submitCount, SubmitInfo2* pSubmits, Fence fence);
def ProcQueueWaitIdle = fn Result(Queue queue);
def ProcRegisterDeviceEventEXT = fn Result(Device device, DeviceEventInfoEXT* pDeviceEventInfo, AllocationCallbacks* pAllocator, Fence* pFence);
def ProcRegisterDisplayEventEXT = fn Result(Device device, DisplayKHR display, DisplayEventInfoEXT* pDisplayEventInfo, AllocationCallbacks* pAllocator, Fence* pFence);
def ProcReleaseCapturedPipelineDataKHR = fn Result(Device device, ReleaseCapturedPipelineDataInfoKHR* pInfo, AllocationCallbacks* pAllocator);
def ProcReleaseFullScreenExclusiveModeEXT = fn Result(Device device, SwapchainKHR swapchain);
def ProcReleasePerformanceConfigurationINTEL = fn Result(Device device, PerformanceConfigurationINTEL configuration);
def ProcReleaseProfilingLockKHR = fn void(Device device);
def ProcReleaseSwapchainImagesEXT = fn Result(Device device, ReleaseSwapchainImagesInfoEXT* pReleaseInfo);
def ProcResetCommandBuffer = fn Result(CommandBuffer commandBuffer, CommandBufferResetFlags flags);
def ProcResetCommandPool = fn Result(Device device, CommandPool commandPool, CommandPoolResetFlags flags);
def ProcResetDescriptorPool = fn Result(Device device, DescriptorPool descriptorPool, DescriptorPoolResetFlags flags);
def ProcResetEvent = fn Result(Device device, Event event);
def ProcResetFences = fn Result(Device device, uint fenceCount, Fence* pFences);
def ProcResetQueryPool = fn void(Device device, QueryPool queryPool, uint firstQuery, uint queryCount);
def ProcResetQueryPoolEXT = fn void(Device device, QueryPool queryPool, uint firstQuery, uint queryCount);
def ProcSetDebugUtilsObjectNameEXT = fn Result(Device device, DebugUtilsObjectNameInfoEXT* pNameInfo);
def ProcSetDebugUtilsObjectTagEXT = fn Result(Device device, DebugUtilsObjectTagInfoEXT* pTagInfo);
def ProcSetDeviceMemoryPriorityEXT = fn void(Device device, DeviceMemory memory, float priority);
def ProcSetEvent = fn Result(Device device, Event event);
def ProcSetHdrMetadataEXT = fn void(Device device, uint swapchainCount, SwapchainKHR* pSwapchains, HdrMetadataEXT* pMetadata);
def ProcSetLatencyMarkerNV = fn void(Device device, SwapchainKHR swapchain, SetLatencyMarkerInfoNV* pLatencyMarkerInfo);
def ProcSetLatencySleepModeNV = fn Result(Device device, SwapchainKHR swapchain, LatencySleepModeInfoNV* pSleepModeInfo);
def ProcSetLocalDimmingAMD = fn void(Device device, SwapchainKHR swapChain, uint localDimmingEnable);
def ProcSetPrivateData = fn Result(Device device, ObjectType objectType, ulong objectHandle, PrivateDataSlot privateDataSlot, ulong data);
def ProcSetPrivateDataEXT = fn Result(Device device, ObjectType objectType, ulong objectHandle, PrivateDataSlot privateDataSlot, ulong data);
def ProcSignalSemaphore = fn Result(Device device, SemaphoreSignalInfo* pSignalInfo);
def ProcSignalSemaphoreKHR = fn Result(Device device, SemaphoreSignalInfo* pSignalInfo);
def ProcTransitionImageLayout = fn Result(Device device, uint transitionCount, HostImageLayoutTransitionInfo* pTransitions);
def ProcTransitionImageLayoutEXT = fn Result(Device device, uint transitionCount, HostImageLayoutTransitionInfo* pTransitions);
def ProcTrimCommandPool = fn void(Device device, CommandPool commandPool, CommandPoolTrimFlags flags);
def ProcTrimCommandPoolKHR = fn void(Device device, CommandPool commandPool, CommandPoolTrimFlags flags);
def ProcUninitializePerformanceApiINTEL = fn void(Device device);
def ProcUnmapMemory = fn void(Device device, DeviceMemory memory);
def ProcUnmapMemory2 = fn Result(Device device, MemoryUnmapInfo* pMemoryUnmapInfo);
def ProcUnmapMemory2KHR = fn Result(Device device, MemoryUnmapInfo* pMemoryUnmapInfo);
def ProcUpdateDescriptorSetWithTemplate = fn void(Device device, DescriptorSet descriptorSet, DescriptorUpdateTemplate descriptorUpdateTemplate, void* pData);
def ProcUpdateDescriptorSetWithTemplateKHR = fn void(Device device, DescriptorSet descriptorSet, DescriptorUpdateTemplate descriptorUpdateTemplate, void* pData);
def ProcUpdateDescriptorSets = fn void(Device device, uint descriptorWriteCount, WriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, CopyDescriptorSet* pDescriptorCopies);
def ProcUpdateIndirectExecutionSetPipelineEXT = fn void(Device device, IndirectExecutionSetEXT indirectExecutionSet, uint executionSetWriteCount, WriteIndirectExecutionSetPipelineEXT* pExecutionSetWrites);
def ProcUpdateIndirectExecutionSetShaderEXT = fn void(Device device, IndirectExecutionSetEXT indirectExecutionSet, uint executionSetWriteCount, WriteIndirectExecutionSetShaderEXT* pExecutionSetWrites);
def ProcUpdateVideoSessionParametersKHR = fn Result(Device device, VideoSessionParametersKHR videoSessionParameters, VideoSessionParametersUpdateInfoKHR* pUpdateInfo);
def ProcWaitForFences = fn Result(Device device, uint fenceCount, Fence* pFences, uint waitAll, ulong timeout);
def ProcWaitForPresentKHR = fn Result(Device device, SwapchainKHR swapchain, ulong presentId, ulong timeout);
def ProcWaitSemaphores = fn Result(Device device, SemaphoreWaitInfo* pWaitInfo, ulong timeout);
def ProcWaitSemaphoresKHR = fn Result(Device device, SemaphoreWaitInfo* pWaitInfo, ulong timeout);
def ProcWriteAccelerationStructuresPropertiesKHR = fn Result(Device device, uint accelerationStructureCount, AccelerationStructureKHR* pAccelerationStructures, QueryType queryType, usz dataSize, void* pData, usz stride);
def ProcWriteMicromapsPropertiesEXT = fn Result(Device device, uint micromapCount, MicromapEXT* pMicromaps, QueryType queryType, usz dataSize, void* pData, usz stride);

module vk::internal;
// Loader Procedures
ProcAllocationFunction                   allocationFunction;
ProcCreateInstance                       createInstance;
ProcDebugUtilsMessengerCallbackEXT       debugUtilsMessengerCallbackEXT;
ProcDeviceMemoryReportCallbackEXT        deviceMemoryReportCallbackEXT;
ProcEnumerateInstanceExtensionProperties enumerateInstanceExtensionProperties;
ProcEnumerateInstanceLayerProperties     enumerateInstanceLayerProperties;
ProcEnumerateInstanceVersion             enumerateInstanceVersion;
ProcFreeFunction                         freeFunction;
ProcGetInstanceProcAddr                  getInstanceProcAddr;
ProcInternalAllocationNotification       internalAllocationNotification;
ProcInternalFreeNotification             internalFreeNotification;
ProcReallocationFunction                 reallocationFunction;

// Instance Procedures
ProcAcquireDrmDisplayEXT                                             acquireDrmDisplayEXT;
ProcAcquireWinrtDisplayNV                                            acquireWinrtDisplayNV;
ProcCreateDebugReportCallbackEXT                                     createDebugReportCallbackEXT;
ProcCreateDebugUtilsMessengerEXT                                     createDebugUtilsMessengerEXT;
ProcCreateDevice                                                     createDevice;
ProcCreateDisplayModeKHR                                             createDisplayModeKHR;
ProcCreateDisplayPlaneSurfaceKHR                                     createDisplayPlaneSurfaceKHR;
ProcCreateHeadlessSurfaceEXT                                         createHeadlessSurfaceEXT;
ProcCreateIOSSurfaceMVK                                              createIOSSurfaceMVK;
ProcCreateMacOSSurfaceMVK                                            createMacOSSurfaceMVK;
ProcCreateMetalSurfaceEXT                                            createMetalSurfaceEXT;
ProcCreateWaylandSurfaceKHR                                          createWaylandSurfaceKHR;
ProcCreateWin32SurfaceKHR                                            createWin32SurfaceKHR;
ProcCreateXcbSurfaceKHR                                              createXcbSurfaceKHR;
ProcCreateXlibSurfaceKHR                                             createXlibSurfaceKHR;
ProcDebugReportMessageEXT                                            debugReportMessageEXT;
ProcDestroyDebugReportCallbackEXT                                    destroyDebugReportCallbackEXT;
ProcDestroyDebugUtilsMessengerEXT                                    destroyDebugUtilsMessengerEXT;
ProcDestroyInstance                                                  destroyInstance;
ProcDestroySurfaceKHR                                                destroySurfaceKHR;
ProcEnumerateDeviceExtensionProperties                               enumerateDeviceExtensionProperties;
ProcEnumerateDeviceLayerProperties                                   enumerateDeviceLayerProperties;
ProcEnumeratePhysicalDeviceGroups                                    enumeratePhysicalDeviceGroups;
ProcEnumeratePhysicalDeviceGroupsKHR                                 enumeratePhysicalDeviceGroupsKHR;
ProcEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR    enumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
ProcEnumeratePhysicalDevices                                         enumeratePhysicalDevices;
ProcGetDisplayModeProperties2KHR                                     getDisplayModeProperties2KHR;
ProcGetDisplayModePropertiesKHR                                      getDisplayModePropertiesKHR;
ProcGetDisplayPlaneCapabilities2KHR                                  getDisplayPlaneCapabilities2KHR;
ProcGetDisplayPlaneCapabilitiesKHR                                   getDisplayPlaneCapabilitiesKHR;
ProcGetDisplayPlaneSupportedDisplaysKHR                              getDisplayPlaneSupportedDisplaysKHR;
ProcGetDrmDisplayEXT                                                 getDrmDisplayEXT;
ProcGetInstanceProcAddrLUNARG                                        getInstanceProcAddrLUNARG;
ProcGetPhysicalDeviceCalibrateableTimeDomainsEXT                     getPhysicalDeviceCalibrateableTimeDomainsEXT;
ProcGetPhysicalDeviceCalibrateableTimeDomainsKHR                     getPhysicalDeviceCalibrateableTimeDomainsKHR;
ProcGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV getPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV;
ProcGetPhysicalDeviceCooperativeMatrixPropertiesKHR                  getPhysicalDeviceCooperativeMatrixPropertiesKHR;
ProcGetPhysicalDeviceCooperativeMatrixPropertiesNV                   getPhysicalDeviceCooperativeMatrixPropertiesNV;
ProcGetPhysicalDeviceCooperativeVectorPropertiesNV                   getPhysicalDeviceCooperativeVectorPropertiesNV;
ProcGetPhysicalDeviceDisplayPlaneProperties2KHR                      getPhysicalDeviceDisplayPlaneProperties2KHR;
ProcGetPhysicalDeviceDisplayPlanePropertiesKHR                       getPhysicalDeviceDisplayPlanePropertiesKHR;
ProcGetPhysicalDeviceDisplayProperties2KHR                           getPhysicalDeviceDisplayProperties2KHR;
ProcGetPhysicalDeviceDisplayPropertiesKHR                            getPhysicalDeviceDisplayPropertiesKHR;
ProcGetPhysicalDeviceExternalBufferProperties                        getPhysicalDeviceExternalBufferProperties;
ProcGetPhysicalDeviceExternalBufferPropertiesKHR                     getPhysicalDeviceExternalBufferPropertiesKHR;
ProcGetPhysicalDeviceExternalFenceProperties                         getPhysicalDeviceExternalFenceProperties;
ProcGetPhysicalDeviceExternalFencePropertiesKHR                      getPhysicalDeviceExternalFencePropertiesKHR;
ProcGetPhysicalDeviceExternalImageFormatPropertiesNV                 getPhysicalDeviceExternalImageFormatPropertiesNV;
ProcGetPhysicalDeviceExternalSemaphoreProperties                     getPhysicalDeviceExternalSemaphoreProperties;
ProcGetPhysicalDeviceExternalSemaphorePropertiesKHR                  getPhysicalDeviceExternalSemaphorePropertiesKHR;
ProcGetPhysicalDeviceFeatures                                        getPhysicalDeviceFeatures;
ProcGetPhysicalDeviceFeatures2                                       getPhysicalDeviceFeatures2;
ProcGetPhysicalDeviceFeatures2KHR                                    getPhysicalDeviceFeatures2KHR;
ProcGetPhysicalDeviceFormatProperties                                getPhysicalDeviceFormatProperties;
ProcGetPhysicalDeviceFormatProperties2                               getPhysicalDeviceFormatProperties2;
ProcGetPhysicalDeviceFormatProperties2KHR                            getPhysicalDeviceFormatProperties2KHR;
ProcGetPhysicalDeviceFragmentShadingRatesKHR                         getPhysicalDeviceFragmentShadingRatesKHR;
ProcGetPhysicalDeviceImageFormatProperties                           getPhysicalDeviceImageFormatProperties;
ProcGetPhysicalDeviceImageFormatProperties2                          getPhysicalDeviceImageFormatProperties2;
ProcGetPhysicalDeviceImageFormatProperties2KHR                       getPhysicalDeviceImageFormatProperties2KHR;
ProcGetPhysicalDeviceMemoryProperties                                getPhysicalDeviceMemoryProperties;
ProcGetPhysicalDeviceMemoryProperties2                               getPhysicalDeviceMemoryProperties2;
ProcGetPhysicalDeviceMemoryProperties2KHR                            getPhysicalDeviceMemoryProperties2KHR;
ProcGetPhysicalDeviceMultisamplePropertiesEXT                        getPhysicalDeviceMultisamplePropertiesEXT;
ProcGetPhysicalDeviceOpticalFlowImageFormatsNV                       getPhysicalDeviceOpticalFlowImageFormatsNV;
ProcGetPhysicalDevicePresentRectanglesKHR                            getPhysicalDevicePresentRectanglesKHR;
ProcGetPhysicalDeviceProperties                                      getPhysicalDeviceProperties;
ProcGetPhysicalDeviceProperties2                                     getPhysicalDeviceProperties2;
ProcGetPhysicalDeviceProperties2KHR                                  getPhysicalDeviceProperties2KHR;
ProcGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR            getPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
ProcGetPhysicalDeviceQueueFamilyProperties                           getPhysicalDeviceQueueFamilyProperties;
ProcGetPhysicalDeviceQueueFamilyProperties2                          getPhysicalDeviceQueueFamilyProperties2;
ProcGetPhysicalDeviceQueueFamilyProperties2KHR                       getPhysicalDeviceQueueFamilyProperties2KHR;
ProcGetPhysicalDeviceSparseImageFormatProperties                     getPhysicalDeviceSparseImageFormatProperties;
ProcGetPhysicalDeviceSparseImageFormatProperties2                    getPhysicalDeviceSparseImageFormatProperties2;
ProcGetPhysicalDeviceSparseImageFormatProperties2KHR                 getPhysicalDeviceSparseImageFormatProperties2KHR;
ProcGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV  getPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
ProcGetPhysicalDeviceSurfaceCapabilities2EXT                         getPhysicalDeviceSurfaceCapabilities2EXT;
ProcGetPhysicalDeviceSurfaceCapabilities2KHR                         getPhysicalDeviceSurfaceCapabilities2KHR;
ProcGetPhysicalDeviceSurfaceCapabilitiesKHR                          getPhysicalDeviceSurfaceCapabilitiesKHR;
ProcGetPhysicalDeviceSurfaceFormats2KHR                              getPhysicalDeviceSurfaceFormats2KHR;
ProcGetPhysicalDeviceSurfaceFormatsKHR                               getPhysicalDeviceSurfaceFormatsKHR;
ProcGetPhysicalDeviceSurfacePresentModes2EXT                         getPhysicalDeviceSurfacePresentModes2EXT;
ProcGetPhysicalDeviceSurfacePresentModesKHR                          getPhysicalDeviceSurfacePresentModesKHR;
ProcGetPhysicalDeviceSurfaceSupportKHR                               getPhysicalDeviceSurfaceSupportKHR;
ProcGetPhysicalDeviceToolProperties                                  getPhysicalDeviceToolProperties;
ProcGetPhysicalDeviceToolPropertiesEXT                               getPhysicalDeviceToolPropertiesEXT;
ProcGetPhysicalDeviceVideoCapabilitiesKHR                            getPhysicalDeviceVideoCapabilitiesKHR;
ProcGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR            getPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;
ProcGetPhysicalDeviceVideoFormatPropertiesKHR                        getPhysicalDeviceVideoFormatPropertiesKHR;
ProcGetPhysicalDeviceWaylandPresentationSupportKHR                   getPhysicalDeviceWaylandPresentationSupportKHR;
ProcGetPhysicalDeviceWin32PresentationSupportKHR                     getPhysicalDeviceWin32PresentationSupportKHR;
ProcGetPhysicalDeviceXcbPresentationSupportKHR                       getPhysicalDeviceXcbPresentationSupportKHR;
ProcGetPhysicalDeviceXlibPresentationSupportKHR                      getPhysicalDeviceXlibPresentationSupportKHR;
ProcGetWinrtDisplayNV                                                getWinrtDisplayNV;
ProcReleaseDisplayEXT                                                releaseDisplayEXT;
ProcSubmitDebugUtilsMessageEXT                                       submitDebugUtilsMessageEXT;

// Device Procedures
ProcAcquireFullScreenExclusiveModeEXT                      acquireFullScreenExclusiveModeEXT;
ProcAcquireNextImage2KHR                                   acquireNextImage2KHR;
ProcAcquireNextImageKHR                                    acquireNextImageKHR;
ProcAcquirePerformanceConfigurationINTEL                   acquirePerformanceConfigurationINTEL;
ProcAcquireProfilingLockKHR                                acquireProfilingLockKHR;
ProcAllocateCommandBuffers                                 allocateCommandBuffers;
ProcAllocateDescriptorSets                                 allocateDescriptorSets;
ProcAllocateMemory                                         allocateMemory;
ProcAntiLagUpdateAMD                                       antiLagUpdateAMD;
ProcBeginCommandBuffer                                     beginCommandBuffer;
ProcBindAccelerationStructureMemoryNV                      bindAccelerationStructureMemoryNV;
ProcBindBufferMemory                                       bindBufferMemory;
ProcBindBufferMemory2                                      bindBufferMemory2;
ProcBindBufferMemory2KHR                                   bindBufferMemory2KHR;
ProcBindImageMemory                                        bindImageMemory;
ProcBindImageMemory2                                       bindImageMemory2;
ProcBindImageMemory2KHR                                    bindImageMemory2KHR;
ProcBindOpticalFlowSessionImageNV                          bindOpticalFlowSessionImageNV;
ProcBindVideoSessionMemoryKHR                              bindVideoSessionMemoryKHR;
ProcBuildAccelerationStructuresKHR                         buildAccelerationStructuresKHR;
ProcBuildMicromapsEXT                                      buildMicromapsEXT;
ProcCmdBeginConditionalRenderingEXT                        cmdBeginConditionalRenderingEXT;
ProcCmdBeginDebugUtilsLabelEXT                             cmdBeginDebugUtilsLabelEXT;
ProcCmdBeginQuery                                          cmdBeginQuery;
ProcCmdBeginQueryIndexedEXT                                cmdBeginQueryIndexedEXT;
ProcCmdBeginRenderPass                                     cmdBeginRenderPass;
ProcCmdBeginRenderPass2                                    cmdBeginRenderPass2;
ProcCmdBeginRenderPass2KHR                                 cmdBeginRenderPass2KHR;
ProcCmdBeginRendering                                      cmdBeginRendering;
ProcCmdBeginRenderingKHR                                   cmdBeginRenderingKHR;
ProcCmdBeginTransformFeedbackEXT                           cmdBeginTransformFeedbackEXT;
ProcCmdBeginVideoCodingKHR                                 cmdBeginVideoCodingKHR;
ProcCmdBindDescriptorBufferEmbeddedSamplers2EXT            cmdBindDescriptorBufferEmbeddedSamplers2EXT;
ProcCmdBindDescriptorBufferEmbeddedSamplersEXT             cmdBindDescriptorBufferEmbeddedSamplersEXT;
ProcCmdBindDescriptorBuffersEXT                            cmdBindDescriptorBuffersEXT;
ProcCmdBindDescriptorSets                                  cmdBindDescriptorSets;
ProcCmdBindDescriptorSets2                                 cmdBindDescriptorSets2;
ProcCmdBindDescriptorSets2KHR                              cmdBindDescriptorSets2KHR;
ProcCmdBindIndexBuffer                                     cmdBindIndexBuffer;
ProcCmdBindIndexBuffer2                                    cmdBindIndexBuffer2;
ProcCmdBindIndexBuffer2KHR                                 cmdBindIndexBuffer2KHR;
ProcCmdBindInvocationMaskHUAWEI                            cmdBindInvocationMaskHUAWEI;
ProcCmdBindPipeline                                        cmdBindPipeline;
ProcCmdBindPipelineShaderGroupNV                           cmdBindPipelineShaderGroupNV;
ProcCmdBindShadersEXT                                      cmdBindShadersEXT;
ProcCmdBindShadingRateImageNV                              cmdBindShadingRateImageNV;
ProcCmdBindTransformFeedbackBuffersEXT                     cmdBindTransformFeedbackBuffersEXT;
ProcCmdBindVertexBuffers                                   cmdBindVertexBuffers;
ProcCmdBindVertexBuffers2                                  cmdBindVertexBuffers2;
ProcCmdBindVertexBuffers2EXT                               cmdBindVertexBuffers2EXT;
ProcCmdBlitImage                                           cmdBlitImage;
ProcCmdBlitImage2                                          cmdBlitImage2;
ProcCmdBlitImage2KHR                                       cmdBlitImage2KHR;
ProcCmdBuildAccelerationStructureNV                        cmdBuildAccelerationStructureNV;
ProcCmdBuildAccelerationStructuresIndirectKHR              cmdBuildAccelerationStructuresIndirectKHR;
ProcCmdBuildAccelerationStructuresKHR                      cmdBuildAccelerationStructuresKHR;
ProcCmdBuildClusterAccelerationStructureIndirectNV         cmdBuildClusterAccelerationStructureIndirectNV;
ProcCmdBuildMicromapsEXT                                   cmdBuildMicromapsEXT;
ProcCmdBuildPartitionedAccelerationStructuresNV            cmdBuildPartitionedAccelerationStructuresNV;
ProcCmdClearAttachments                                    cmdClearAttachments;
ProcCmdClearColorImage                                     cmdClearColorImage;
ProcCmdClearDepthStencilImage                              cmdClearDepthStencilImage;
ProcCmdControlVideoCodingKHR                               cmdControlVideoCodingKHR;
ProcCmdConvertCooperativeVectorMatrixNV                    cmdConvertCooperativeVectorMatrixNV;
ProcCmdCopyAccelerationStructureKHR                        cmdCopyAccelerationStructureKHR;
ProcCmdCopyAccelerationStructureNV                         cmdCopyAccelerationStructureNV;
ProcCmdCopyAccelerationStructureToMemoryKHR                cmdCopyAccelerationStructureToMemoryKHR;
ProcCmdCopyBuffer                                          cmdCopyBuffer;
ProcCmdCopyBuffer2                                         cmdCopyBuffer2;
ProcCmdCopyBuffer2KHR                                      cmdCopyBuffer2KHR;
ProcCmdCopyBufferToImage                                   cmdCopyBufferToImage;
ProcCmdCopyBufferToImage2                                  cmdCopyBufferToImage2;
ProcCmdCopyBufferToImage2KHR                               cmdCopyBufferToImage2KHR;
ProcCmdCopyImage                                           cmdCopyImage;
ProcCmdCopyImage2                                          cmdCopyImage2;
ProcCmdCopyImage2KHR                                       cmdCopyImage2KHR;
ProcCmdCopyImageToBuffer                                   cmdCopyImageToBuffer;
ProcCmdCopyImageToBuffer2                                  cmdCopyImageToBuffer2;
ProcCmdCopyImageToBuffer2KHR                               cmdCopyImageToBuffer2KHR;
ProcCmdCopyMemoryIndirectNV                                cmdCopyMemoryIndirectNV;
ProcCmdCopyMemoryToAccelerationStructureKHR                cmdCopyMemoryToAccelerationStructureKHR;
ProcCmdCopyMemoryToImageIndirectNV                         cmdCopyMemoryToImageIndirectNV;
ProcCmdCopyMemoryToMicromapEXT                             cmdCopyMemoryToMicromapEXT;
ProcCmdCopyMicromapEXT                                     cmdCopyMicromapEXT;
ProcCmdCopyMicromapToMemoryEXT                             cmdCopyMicromapToMemoryEXT;
ProcCmdCopyQueryPoolResults                                cmdCopyQueryPoolResults;
ProcCmdCuLaunchKernelNVX                                   cmdCuLaunchKernelNVX;
ProcCmdCudaLaunchKernelNV                                  cmdCudaLaunchKernelNV;
ProcCmdDebugMarkerBeginEXT                                 cmdDebugMarkerBeginEXT;
ProcCmdDebugMarkerEndEXT                                   cmdDebugMarkerEndEXT;
ProcCmdDebugMarkerInsertEXT                                cmdDebugMarkerInsertEXT;
ProcCmdDecodeVideoKHR                                      cmdDecodeVideoKHR;
ProcCmdDecompressMemoryIndirectCountNV                     cmdDecompressMemoryIndirectCountNV;
ProcCmdDecompressMemoryNV                                  cmdDecompressMemoryNV;
ProcCmdDispatch                                            cmdDispatch;
ProcCmdDispatchBase                                        cmdDispatchBase;
ProcCmdDispatchBaseKHR                                     cmdDispatchBaseKHR;
ProcCmdDispatchIndirect                                    cmdDispatchIndirect;
ProcCmdDraw                                                cmdDraw;
ProcCmdDrawClusterHUAWEI                                   cmdDrawClusterHUAWEI;
ProcCmdDrawClusterIndirectHUAWEI                           cmdDrawClusterIndirectHUAWEI;
ProcCmdDrawIndexed                                         cmdDrawIndexed;
ProcCmdDrawIndexedIndirect                                 cmdDrawIndexedIndirect;
ProcCmdDrawIndexedIndirectCount                            cmdDrawIndexedIndirectCount;
ProcCmdDrawIndexedIndirectCountAMD                         cmdDrawIndexedIndirectCountAMD;
ProcCmdDrawIndexedIndirectCountKHR                         cmdDrawIndexedIndirectCountKHR;
ProcCmdDrawIndirect                                        cmdDrawIndirect;
ProcCmdDrawIndirectByteCountEXT                            cmdDrawIndirectByteCountEXT;
ProcCmdDrawIndirectCount                                   cmdDrawIndirectCount;
ProcCmdDrawIndirectCountAMD                                cmdDrawIndirectCountAMD;
ProcCmdDrawIndirectCountKHR                                cmdDrawIndirectCountKHR;
ProcCmdDrawMeshTasksEXT                                    cmdDrawMeshTasksEXT;
ProcCmdDrawMeshTasksIndirectCountEXT                       cmdDrawMeshTasksIndirectCountEXT;
ProcCmdDrawMeshTasksIndirectCountNV                        cmdDrawMeshTasksIndirectCountNV;
ProcCmdDrawMeshTasksIndirectEXT                            cmdDrawMeshTasksIndirectEXT;
ProcCmdDrawMeshTasksIndirectNV                             cmdDrawMeshTasksIndirectNV;
ProcCmdDrawMeshTasksNV                                     cmdDrawMeshTasksNV;
ProcCmdDrawMultiEXT                                        cmdDrawMultiEXT;
ProcCmdDrawMultiIndexedEXT                                 cmdDrawMultiIndexedEXT;
ProcCmdEncodeVideoKHR                                      cmdEncodeVideoKHR;
ProcCmdEndConditionalRenderingEXT                          cmdEndConditionalRenderingEXT;
ProcCmdEndDebugUtilsLabelEXT                               cmdEndDebugUtilsLabelEXT;
ProcCmdEndQuery                                            cmdEndQuery;
ProcCmdEndQueryIndexedEXT                                  cmdEndQueryIndexedEXT;
ProcCmdEndRenderPass                                       cmdEndRenderPass;
ProcCmdEndRenderPass2                                      cmdEndRenderPass2;
ProcCmdEndRenderPass2KHR                                   cmdEndRenderPass2KHR;
ProcCmdEndRendering                                        cmdEndRendering;
ProcCmdEndRenderingKHR                                     cmdEndRenderingKHR;
ProcCmdEndTransformFeedbackEXT                             cmdEndTransformFeedbackEXT;
ProcCmdEndVideoCodingKHR                                   cmdEndVideoCodingKHR;
ProcCmdExecuteCommands                                     cmdExecuteCommands;
ProcCmdExecuteGeneratedCommandsEXT                         cmdExecuteGeneratedCommandsEXT;
ProcCmdExecuteGeneratedCommandsNV                          cmdExecuteGeneratedCommandsNV;
ProcCmdFillBuffer                                          cmdFillBuffer;
ProcCmdInsertDebugUtilsLabelEXT                            cmdInsertDebugUtilsLabelEXT;
ProcCmdNextSubpass                                         cmdNextSubpass;
ProcCmdNextSubpass2                                        cmdNextSubpass2;
ProcCmdNextSubpass2KHR                                     cmdNextSubpass2KHR;
ProcCmdOpticalFlowExecuteNV                                cmdOpticalFlowExecuteNV;
ProcCmdPipelineBarrier                                     cmdPipelineBarrier;
ProcCmdPipelineBarrier2                                    cmdPipelineBarrier2;
ProcCmdPipelineBarrier2KHR                                 cmdPipelineBarrier2KHR;
ProcCmdPreprocessGeneratedCommandsEXT                      cmdPreprocessGeneratedCommandsEXT;
ProcCmdPreprocessGeneratedCommandsNV                       cmdPreprocessGeneratedCommandsNV;
ProcCmdPushConstants                                       cmdPushConstants;
ProcCmdPushConstants2                                      cmdPushConstants2;
ProcCmdPushConstants2KHR                                   cmdPushConstants2KHR;
ProcCmdPushDescriptorSet                                   cmdPushDescriptorSet;
ProcCmdPushDescriptorSet2                                  cmdPushDescriptorSet2;
ProcCmdPushDescriptorSet2KHR                               cmdPushDescriptorSet2KHR;
ProcCmdPushDescriptorSetKHR                                cmdPushDescriptorSetKHR;
ProcCmdPushDescriptorSetWithTemplate                       cmdPushDescriptorSetWithTemplate;
ProcCmdPushDescriptorSetWithTemplate2                      cmdPushDescriptorSetWithTemplate2;
ProcCmdPushDescriptorSetWithTemplate2KHR                   cmdPushDescriptorSetWithTemplate2KHR;
ProcCmdPushDescriptorSetWithTemplateKHR                    cmdPushDescriptorSetWithTemplateKHR;
ProcCmdResetEvent                                          cmdResetEvent;
ProcCmdResetEvent2                                         cmdResetEvent2;
ProcCmdResetEvent2KHR                                      cmdResetEvent2KHR;
ProcCmdResetQueryPool                                      cmdResetQueryPool;
ProcCmdResolveImage                                        cmdResolveImage;
ProcCmdResolveImage2                                       cmdResolveImage2;
ProcCmdResolveImage2KHR                                    cmdResolveImage2KHR;
ProcCmdSetAlphaToCoverageEnableEXT                         cmdSetAlphaToCoverageEnableEXT;
ProcCmdSetAlphaToOneEnableEXT                              cmdSetAlphaToOneEnableEXT;
ProcCmdSetAttachmentFeedbackLoopEnableEXT                  cmdSetAttachmentFeedbackLoopEnableEXT;
ProcCmdSetBlendConstants                                   cmdSetBlendConstants;
ProcCmdSetCheckpointNV                                     cmdSetCheckpointNV;
ProcCmdSetCoarseSampleOrderNV                              cmdSetCoarseSampleOrderNV;
ProcCmdSetColorBlendAdvancedEXT                            cmdSetColorBlendAdvancedEXT;
ProcCmdSetColorBlendEnableEXT                              cmdSetColorBlendEnableEXT;
ProcCmdSetColorBlendEquationEXT                            cmdSetColorBlendEquationEXT;
ProcCmdSetColorWriteMaskEXT                                cmdSetColorWriteMaskEXT;
ProcCmdSetConservativeRasterizationModeEXT                 cmdSetConservativeRasterizationModeEXT;
ProcCmdSetCoverageModulationModeNV                         cmdSetCoverageModulationModeNV;
ProcCmdSetCoverageModulationTableEnableNV                  cmdSetCoverageModulationTableEnableNV;
ProcCmdSetCoverageModulationTableNV                        cmdSetCoverageModulationTableNV;
ProcCmdSetCoverageReductionModeNV                          cmdSetCoverageReductionModeNV;
ProcCmdSetCoverageToColorEnableNV                          cmdSetCoverageToColorEnableNV;
ProcCmdSetCoverageToColorLocationNV                        cmdSetCoverageToColorLocationNV;
ProcCmdSetCullMode                                         cmdSetCullMode;
ProcCmdSetCullModeEXT                                      cmdSetCullModeEXT;
ProcCmdSetDepthBias                                        cmdSetDepthBias;
ProcCmdSetDepthBias2EXT                                    cmdSetDepthBias2EXT;
ProcCmdSetDepthBiasEnable                                  cmdSetDepthBiasEnable;
ProcCmdSetDepthBiasEnableEXT                               cmdSetDepthBiasEnableEXT;
ProcCmdSetDepthBounds                                      cmdSetDepthBounds;
ProcCmdSetDepthBoundsTestEnable                            cmdSetDepthBoundsTestEnable;
ProcCmdSetDepthBoundsTestEnableEXT                         cmdSetDepthBoundsTestEnableEXT;
ProcCmdSetDepthClampEnableEXT                              cmdSetDepthClampEnableEXT;
ProcCmdSetDepthClampRangeEXT                               cmdSetDepthClampRangeEXT;
ProcCmdSetDepthClipEnableEXT                               cmdSetDepthClipEnableEXT;
ProcCmdSetDepthClipNegativeOneToOneEXT                     cmdSetDepthClipNegativeOneToOneEXT;
ProcCmdSetDepthCompareOp                                   cmdSetDepthCompareOp;
ProcCmdSetDepthCompareOpEXT                                cmdSetDepthCompareOpEXT;
ProcCmdSetDepthTestEnable                                  cmdSetDepthTestEnable;
ProcCmdSetDepthTestEnableEXT                               cmdSetDepthTestEnableEXT;
ProcCmdSetDepthWriteEnable                                 cmdSetDepthWriteEnable;
ProcCmdSetDepthWriteEnableEXT                              cmdSetDepthWriteEnableEXT;
ProcCmdSetDescriptorBufferOffsets2EXT                      cmdSetDescriptorBufferOffsets2EXT;
ProcCmdSetDescriptorBufferOffsetsEXT                       cmdSetDescriptorBufferOffsetsEXT;
ProcCmdSetDeviceMask                                       cmdSetDeviceMask;
ProcCmdSetDeviceMaskKHR                                    cmdSetDeviceMaskKHR;
ProcCmdSetDiscardRectangleEXT                              cmdSetDiscardRectangleEXT;
ProcCmdSetDiscardRectangleEnableEXT                        cmdSetDiscardRectangleEnableEXT;
ProcCmdSetDiscardRectangleModeEXT                          cmdSetDiscardRectangleModeEXT;
ProcCmdSetEvent                                            cmdSetEvent;
ProcCmdSetEvent2                                           cmdSetEvent2;
ProcCmdSetEvent2KHR                                        cmdSetEvent2KHR;
ProcCmdSetExclusiveScissorEnableNV                         cmdSetExclusiveScissorEnableNV;
ProcCmdSetExclusiveScissorNV                               cmdSetExclusiveScissorNV;
ProcCmdSetExtraPrimitiveOverestimationSizeEXT              cmdSetExtraPrimitiveOverestimationSizeEXT;
ProcCmdSetFragmentShadingRateEnumNV                        cmdSetFragmentShadingRateEnumNV;
ProcCmdSetFragmentShadingRateKHR                           cmdSetFragmentShadingRateKHR;
ProcCmdSetFrontFace                                        cmdSetFrontFace;
ProcCmdSetFrontFaceEXT                                     cmdSetFrontFaceEXT;
ProcCmdSetLineRasterizationModeEXT                         cmdSetLineRasterizationModeEXT;
ProcCmdSetLineStipple                                      cmdSetLineStipple;
ProcCmdSetLineStippleEXT                                   cmdSetLineStippleEXT;
ProcCmdSetLineStippleEnableEXT                             cmdSetLineStippleEnableEXT;
ProcCmdSetLineStippleKHR                                   cmdSetLineStippleKHR;
ProcCmdSetLineWidth                                        cmdSetLineWidth;
ProcCmdSetLogicOpEXT                                       cmdSetLogicOpEXT;
ProcCmdSetLogicOpEnableEXT                                 cmdSetLogicOpEnableEXT;
ProcCmdSetPatchControlPointsEXT                            cmdSetPatchControlPointsEXT;
ProcCmdSetPerformanceMarkerINTEL                           cmdSetPerformanceMarkerINTEL;
ProcCmdSetPerformanceOverrideINTEL                         cmdSetPerformanceOverrideINTEL;
ProcCmdSetPerformanceStreamMarkerINTEL                     cmdSetPerformanceStreamMarkerINTEL;
ProcCmdSetPolygonModeEXT                                   cmdSetPolygonModeEXT;
ProcCmdSetPrimitiveRestartEnable                           cmdSetPrimitiveRestartEnable;
ProcCmdSetPrimitiveRestartEnableEXT                        cmdSetPrimitiveRestartEnableEXT;
ProcCmdSetPrimitiveTopology                                cmdSetPrimitiveTopology;
ProcCmdSetPrimitiveTopologyEXT                             cmdSetPrimitiveTopologyEXT;
ProcCmdSetProvokingVertexModeEXT                           cmdSetProvokingVertexModeEXT;
ProcCmdSetRasterizationSamplesEXT                          cmdSetRasterizationSamplesEXT;
ProcCmdSetRasterizationStreamEXT                           cmdSetRasterizationStreamEXT;
ProcCmdSetRasterizerDiscardEnable                          cmdSetRasterizerDiscardEnable;
ProcCmdSetRasterizerDiscardEnableEXT                       cmdSetRasterizerDiscardEnableEXT;
ProcCmdSetRayTracingPipelineStackSizeKHR                   cmdSetRayTracingPipelineStackSizeKHR;
ProcCmdSetRenderingAttachmentLocations                     cmdSetRenderingAttachmentLocations;
ProcCmdSetRenderingAttachmentLocationsKHR                  cmdSetRenderingAttachmentLocationsKHR;
ProcCmdSetRenderingInputAttachmentIndices                  cmdSetRenderingInputAttachmentIndices;
ProcCmdSetRenderingInputAttachmentIndicesKHR               cmdSetRenderingInputAttachmentIndicesKHR;
ProcCmdSetRepresentativeFragmentTestEnableNV               cmdSetRepresentativeFragmentTestEnableNV;
ProcCmdSetSampleLocationsEXT                               cmdSetSampleLocationsEXT;
ProcCmdSetSampleLocationsEnableEXT                         cmdSetSampleLocationsEnableEXT;
ProcCmdSetSampleMaskEXT                                    cmdSetSampleMaskEXT;
ProcCmdSetScissor                                          cmdSetScissor;
ProcCmdSetScissorWithCount                                 cmdSetScissorWithCount;
ProcCmdSetScissorWithCountEXT                              cmdSetScissorWithCountEXT;
ProcCmdSetShadingRateImageEnableNV                         cmdSetShadingRateImageEnableNV;
ProcCmdSetStencilCompareMask                               cmdSetStencilCompareMask;
ProcCmdSetStencilOp                                        cmdSetStencilOp;
ProcCmdSetStencilOpEXT                                     cmdSetStencilOpEXT;
ProcCmdSetStencilReference                                 cmdSetStencilReference;
ProcCmdSetStencilTestEnable                                cmdSetStencilTestEnable;
ProcCmdSetStencilTestEnableEXT                             cmdSetStencilTestEnableEXT;
ProcCmdSetStencilWriteMask                                 cmdSetStencilWriteMask;
ProcCmdSetTessellationDomainOriginEXT                      cmdSetTessellationDomainOriginEXT;
ProcCmdSetVertexInputEXT                                   cmdSetVertexInputEXT;
ProcCmdSetViewport                                         cmdSetViewport;
ProcCmdSetViewportShadingRatePaletteNV                     cmdSetViewportShadingRatePaletteNV;
ProcCmdSetViewportSwizzleNV                                cmdSetViewportSwizzleNV;
ProcCmdSetViewportWScalingEnableNV                         cmdSetViewportWScalingEnableNV;
ProcCmdSetViewportWScalingNV                               cmdSetViewportWScalingNV;
ProcCmdSetViewportWithCount                                cmdSetViewportWithCount;
ProcCmdSetViewportWithCountEXT                             cmdSetViewportWithCountEXT;
ProcCmdSubpassShadingHUAWEI                                cmdSubpassShadingHUAWEI;
ProcCmdTraceRaysIndirect2KHR                               cmdTraceRaysIndirect2KHR;
ProcCmdTraceRaysIndirectKHR                                cmdTraceRaysIndirectKHR;
ProcCmdTraceRaysKHR                                        cmdTraceRaysKHR;
ProcCmdTraceRaysNV                                         cmdTraceRaysNV;
ProcCmdUpdateBuffer                                        cmdUpdateBuffer;
ProcCmdUpdatePipelineIndirectBufferNV                      cmdUpdatePipelineIndirectBufferNV;
ProcCmdWaitEvents                                          cmdWaitEvents;
ProcCmdWaitEvents2                                         cmdWaitEvents2;
ProcCmdWaitEvents2KHR                                      cmdWaitEvents2KHR;
ProcCmdWriteAccelerationStructuresPropertiesKHR            cmdWriteAccelerationStructuresPropertiesKHR;
ProcCmdWriteAccelerationStructuresPropertiesNV             cmdWriteAccelerationStructuresPropertiesNV;
ProcCmdWriteBufferMarker2AMD                               cmdWriteBufferMarker2AMD;
ProcCmdWriteBufferMarkerAMD                                cmdWriteBufferMarkerAMD;
ProcCmdWriteMicromapsPropertiesEXT                         cmdWriteMicromapsPropertiesEXT;
ProcCmdWriteTimestamp                                      cmdWriteTimestamp;
ProcCmdWriteTimestamp2                                     cmdWriteTimestamp2;
ProcCmdWriteTimestamp2KHR                                  cmdWriteTimestamp2KHR;
ProcCompileDeferredNV                                      compileDeferredNV;
ProcConvertCooperativeVectorMatrixNV                       convertCooperativeVectorMatrixNV;
ProcCopyAccelerationStructureKHR                           copyAccelerationStructureKHR;
ProcCopyAccelerationStructureToMemoryKHR                   copyAccelerationStructureToMemoryKHR;
ProcCopyImageToImage                                       copyImageToImage;
ProcCopyImageToImageEXT                                    copyImageToImageEXT;
ProcCopyImageToMemory                                      copyImageToMemory;
ProcCopyImageToMemoryEXT                                   copyImageToMemoryEXT;
ProcCopyMemoryToAccelerationStructureKHR                   copyMemoryToAccelerationStructureKHR;
ProcCopyMemoryToImage                                      copyMemoryToImage;
ProcCopyMemoryToImageEXT                                   copyMemoryToImageEXT;
ProcCopyMemoryToMicromapEXT                                copyMemoryToMicromapEXT;
ProcCopyMicromapEXT                                        copyMicromapEXT;
ProcCopyMicromapToMemoryEXT                                copyMicromapToMemoryEXT;
ProcCreateAccelerationStructureKHR                         createAccelerationStructureKHR;
ProcCreateAccelerationStructureNV                          createAccelerationStructureNV;
ProcCreateBuffer                                           createBuffer;
ProcCreateBufferView                                       createBufferView;
ProcCreateCommandPool                                      createCommandPool;
ProcCreateComputePipelines                                 createComputePipelines;
ProcCreateCuFunctionNVX                                    createCuFunctionNVX;
ProcCreateCuModuleNVX                                      createCuModuleNVX;
ProcCreateCudaFunctionNV                                   createCudaFunctionNV;
ProcCreateCudaModuleNV                                     createCudaModuleNV;
ProcCreateDeferredOperationKHR                             createDeferredOperationKHR;
ProcCreateDescriptorPool                                   createDescriptorPool;
ProcCreateDescriptorSetLayout                              createDescriptorSetLayout;
ProcCreateDescriptorUpdateTemplate                         createDescriptorUpdateTemplate;
ProcCreateDescriptorUpdateTemplateKHR                      createDescriptorUpdateTemplateKHR;
ProcCreateEvent                                            createEvent;
ProcCreateFence                                            createFence;
ProcCreateFramebuffer                                      createFramebuffer;
ProcCreateGraphicsPipelines                                createGraphicsPipelines;
ProcCreateImage                                            createImage;
ProcCreateImageView                                        createImageView;
ProcCreateIndirectCommandsLayoutEXT                        createIndirectCommandsLayoutEXT;
ProcCreateIndirectCommandsLayoutNV                         createIndirectCommandsLayoutNV;
ProcCreateIndirectExecutionSetEXT                          createIndirectExecutionSetEXT;
ProcCreateMicromapEXT                                      createMicromapEXT;
ProcCreateOpticalFlowSessionNV                             createOpticalFlowSessionNV;
ProcCreatePipelineBinariesKHR                              createPipelineBinariesKHR;
ProcCreatePipelineCache                                    createPipelineCache;
ProcCreatePipelineLayout                                   createPipelineLayout;
ProcCreatePrivateDataSlot                                  createPrivateDataSlot;
ProcCreatePrivateDataSlotEXT                               createPrivateDataSlotEXT;
ProcCreateQueryPool                                        createQueryPool;
ProcCreateRayTracingPipelinesKHR                           createRayTracingPipelinesKHR;
ProcCreateRayTracingPipelinesNV                            createRayTracingPipelinesNV;
ProcCreateRenderPass                                       createRenderPass;
ProcCreateRenderPass2                                      createRenderPass2;
ProcCreateRenderPass2KHR                                   createRenderPass2KHR;
ProcCreateSampler                                          createSampler;
ProcCreateSamplerYcbcrConversion                           createSamplerYcbcrConversion;
ProcCreateSamplerYcbcrConversionKHR                        createSamplerYcbcrConversionKHR;
ProcCreateSemaphore                                        createSemaphore;
ProcCreateShaderModule                                     createShaderModule;
ProcCreateShadersEXT                                       createShadersEXT;
ProcCreateSharedSwapchainsKHR                              createSharedSwapchainsKHR;
ProcCreateSwapchainKHR                                     createSwapchainKHR;
ProcCreateValidationCacheEXT                               createValidationCacheEXT;
ProcCreateVideoSessionKHR                                  createVideoSessionKHR;
ProcCreateVideoSessionParametersKHR                        createVideoSessionParametersKHR;
ProcDebugMarkerSetObjectNameEXT                            debugMarkerSetObjectNameEXT;
ProcDebugMarkerSetObjectTagEXT                             debugMarkerSetObjectTagEXT;
ProcDeferredOperationJoinKHR                               deferredOperationJoinKHR;
ProcDestroyAccelerationStructureKHR                        destroyAccelerationStructureKHR;
ProcDestroyAccelerationStructureNV                         destroyAccelerationStructureNV;
ProcDestroyBuffer                                          destroyBuffer;
ProcDestroyBufferView                                      destroyBufferView;
ProcDestroyCommandPool                                     destroyCommandPool;
ProcDestroyCuFunctionNVX                                   destroyCuFunctionNVX;
ProcDestroyCuModuleNVX                                     destroyCuModuleNVX;
ProcDestroyCudaFunctionNV                                  destroyCudaFunctionNV;
ProcDestroyCudaModuleNV                                    destroyCudaModuleNV;
ProcDestroyDeferredOperationKHR                            destroyDeferredOperationKHR;
ProcDestroyDescriptorPool                                  destroyDescriptorPool;
ProcDestroyDescriptorSetLayout                             destroyDescriptorSetLayout;
ProcDestroyDescriptorUpdateTemplate                        destroyDescriptorUpdateTemplate;
ProcDestroyDescriptorUpdateTemplateKHR                     destroyDescriptorUpdateTemplateKHR;
ProcDestroyDevice                                          destroyDevice;
ProcDestroyEvent                                           destroyEvent;
ProcDestroyFence                                           destroyFence;
ProcDestroyFramebuffer                                     destroyFramebuffer;
ProcDestroyImage                                           destroyImage;
ProcDestroyImageView                                       destroyImageView;
ProcDestroyIndirectCommandsLayoutEXT                       destroyIndirectCommandsLayoutEXT;
ProcDestroyIndirectCommandsLayoutNV                        destroyIndirectCommandsLayoutNV;
ProcDestroyIndirectExecutionSetEXT                         destroyIndirectExecutionSetEXT;
ProcDestroyMicromapEXT                                     destroyMicromapEXT;
ProcDestroyOpticalFlowSessionNV                            destroyOpticalFlowSessionNV;
ProcDestroyPipeline                                        destroyPipeline;
ProcDestroyPipelineBinaryKHR                               destroyPipelineBinaryKHR;
ProcDestroyPipelineCache                                   destroyPipelineCache;
ProcDestroyPipelineLayout                                  destroyPipelineLayout;
ProcDestroyPrivateDataSlot                                 destroyPrivateDataSlot;
ProcDestroyPrivateDataSlotEXT                              destroyPrivateDataSlotEXT;
ProcDestroyQueryPool                                       destroyQueryPool;
ProcDestroyRenderPass                                      destroyRenderPass;
ProcDestroySampler                                         destroySampler;
ProcDestroySamplerYcbcrConversion                          destroySamplerYcbcrConversion;
ProcDestroySamplerYcbcrConversionKHR                       destroySamplerYcbcrConversionKHR;
ProcDestroySemaphore                                       destroySemaphore;
ProcDestroyShaderEXT                                       destroyShaderEXT;
ProcDestroyShaderModule                                    destroyShaderModule;
ProcDestroySwapchainKHR                                    destroySwapchainKHR;
ProcDestroyValidationCacheEXT                              destroyValidationCacheEXT;
ProcDestroyVideoSessionKHR                                 destroyVideoSessionKHR;
ProcDestroyVideoSessionParametersKHR                       destroyVideoSessionParametersKHR;
ProcDeviceWaitIdle                                         deviceWaitIdle;
ProcDisplayPowerControlEXT                                 displayPowerControlEXT;
ProcEndCommandBuffer                                       endCommandBuffer;
ProcExportMetalObjectsEXT                                  exportMetalObjectsEXT;
ProcFlushMappedMemoryRanges                                flushMappedMemoryRanges;
ProcFreeCommandBuffers                                     freeCommandBuffers;
ProcFreeDescriptorSets                                     freeDescriptorSets;
ProcFreeMemory                                             freeMemory;
ProcGetAccelerationStructureBuildSizesKHR                  getAccelerationStructureBuildSizesKHR;
ProcGetAccelerationStructureDeviceAddressKHR               getAccelerationStructureDeviceAddressKHR;
ProcGetAccelerationStructureHandleNV                       getAccelerationStructureHandleNV;
ProcGetAccelerationStructureMemoryRequirementsNV           getAccelerationStructureMemoryRequirementsNV;
ProcGetAccelerationStructureOpaqueCaptureDescriptorDataEXT getAccelerationStructureOpaqueCaptureDescriptorDataEXT;
ProcGetBufferDeviceAddress                                 getBufferDeviceAddress;
ProcGetBufferDeviceAddressEXT                              getBufferDeviceAddressEXT;
ProcGetBufferDeviceAddressKHR                              getBufferDeviceAddressKHR;
ProcGetBufferMemoryRequirements                            getBufferMemoryRequirements;
ProcGetBufferMemoryRequirements2                           getBufferMemoryRequirements2;
ProcGetBufferMemoryRequirements2KHR                        getBufferMemoryRequirements2KHR;
ProcGetBufferOpaqueCaptureAddress                          getBufferOpaqueCaptureAddress;
ProcGetBufferOpaqueCaptureAddressKHR                       getBufferOpaqueCaptureAddressKHR;
ProcGetBufferOpaqueCaptureDescriptorDataEXT                getBufferOpaqueCaptureDescriptorDataEXT;
ProcGetCalibratedTimestampsEXT                             getCalibratedTimestampsEXT;
ProcGetCalibratedTimestampsKHR                             getCalibratedTimestampsKHR;
ProcGetClusterAccelerationStructureBuildSizesNV            getClusterAccelerationStructureBuildSizesNV;
ProcGetCudaModuleCacheNV                                   getCudaModuleCacheNV;
ProcGetDeferredOperationMaxConcurrencyKHR                  getDeferredOperationMaxConcurrencyKHR;
ProcGetDeferredOperationResultKHR                          getDeferredOperationResultKHR;
ProcGetDescriptorEXT                                       getDescriptorEXT;
ProcGetDescriptorSetHostMappingVALVE                       getDescriptorSetHostMappingVALVE;
ProcGetDescriptorSetLayoutBindingOffsetEXT                 getDescriptorSetLayoutBindingOffsetEXT;
ProcGetDescriptorSetLayoutHostMappingInfoVALVE             getDescriptorSetLayoutHostMappingInfoVALVE;
ProcGetDescriptorSetLayoutSizeEXT                          getDescriptorSetLayoutSizeEXT;
ProcGetDescriptorSetLayoutSupport                          getDescriptorSetLayoutSupport;
ProcGetDescriptorSetLayoutSupportKHR                       getDescriptorSetLayoutSupportKHR;
ProcGetDeviceAccelerationStructureCompatibilityKHR         getDeviceAccelerationStructureCompatibilityKHR;
ProcGetDeviceBufferMemoryRequirements                      getDeviceBufferMemoryRequirements;
ProcGetDeviceBufferMemoryRequirementsKHR                   getDeviceBufferMemoryRequirementsKHR;
ProcGetDeviceFaultInfoEXT                                  getDeviceFaultInfoEXT;
ProcGetDeviceGroupPeerMemoryFeatures                       getDeviceGroupPeerMemoryFeatures;
ProcGetDeviceGroupPeerMemoryFeaturesKHR                    getDeviceGroupPeerMemoryFeaturesKHR;
ProcGetDeviceGroupPresentCapabilitiesKHR                   getDeviceGroupPresentCapabilitiesKHR;
ProcGetDeviceGroupSurfacePresentModes2EXT                  getDeviceGroupSurfacePresentModes2EXT;
ProcGetDeviceGroupSurfacePresentModesKHR                   getDeviceGroupSurfacePresentModesKHR;
ProcGetDeviceImageMemoryRequirements                       getDeviceImageMemoryRequirements;
ProcGetDeviceImageMemoryRequirementsKHR                    getDeviceImageMemoryRequirementsKHR;
ProcGetDeviceImageSparseMemoryRequirements                 getDeviceImageSparseMemoryRequirements;
ProcGetDeviceImageSparseMemoryRequirementsKHR              getDeviceImageSparseMemoryRequirementsKHR;
ProcGetDeviceImageSubresourceLayout                        getDeviceImageSubresourceLayout;
ProcGetDeviceImageSubresourceLayoutKHR                     getDeviceImageSubresourceLayoutKHR;
ProcGetDeviceMemoryCommitment                              getDeviceMemoryCommitment;
ProcGetDeviceMemoryOpaqueCaptureAddress                    getDeviceMemoryOpaqueCaptureAddress;
ProcGetDeviceMemoryOpaqueCaptureAddressKHR                 getDeviceMemoryOpaqueCaptureAddressKHR;
ProcGetDeviceMicromapCompatibilityEXT                      getDeviceMicromapCompatibilityEXT;
ProcGetDeviceProcAddr                                      getDeviceProcAddr;
ProcGetDeviceQueue                                         getDeviceQueue;
ProcGetDeviceQueue2                                        getDeviceQueue2;
ProcGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI          getDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
ProcGetDynamicRenderingTilePropertiesQCOM                  getDynamicRenderingTilePropertiesQCOM;
ProcGetEncodedVideoSessionParametersKHR                    getEncodedVideoSessionParametersKHR;
ProcGetEventStatus                                         getEventStatus;
ProcGetFenceFdKHR                                          getFenceFdKHR;
ProcGetFenceStatus                                         getFenceStatus;
ProcGetFenceWin32HandleKHR                                 getFenceWin32HandleKHR;
ProcGetFramebufferTilePropertiesQCOM                       getFramebufferTilePropertiesQCOM;
ProcGetGeneratedCommandsMemoryRequirementsEXT              getGeneratedCommandsMemoryRequirementsEXT;
ProcGetGeneratedCommandsMemoryRequirementsNV               getGeneratedCommandsMemoryRequirementsNV;
ProcGetImageDrmFormatModifierPropertiesEXT                 getImageDrmFormatModifierPropertiesEXT;
ProcGetImageMemoryRequirements                             getImageMemoryRequirements;
ProcGetImageMemoryRequirements2                            getImageMemoryRequirements2;
ProcGetImageMemoryRequirements2KHR                         getImageMemoryRequirements2KHR;
ProcGetImageOpaqueCaptureDescriptorDataEXT                 getImageOpaqueCaptureDescriptorDataEXT;
ProcGetImageSparseMemoryRequirements                       getImageSparseMemoryRequirements;
ProcGetImageSparseMemoryRequirements2                      getImageSparseMemoryRequirements2;
ProcGetImageSparseMemoryRequirements2KHR                   getImageSparseMemoryRequirements2KHR;
ProcGetImageSubresourceLayout                              getImageSubresourceLayout;
ProcGetImageSubresourceLayout2                             getImageSubresourceLayout2;
ProcGetImageSubresourceLayout2EXT                          getImageSubresourceLayout2EXT;
ProcGetImageSubresourceLayout2KHR                          getImageSubresourceLayout2KHR;
ProcGetImageViewAddressNVX                                 getImageViewAddressNVX;
ProcGetImageViewHandle64NVX                                getImageViewHandle64NVX;
ProcGetImageViewHandleNVX                                  getImageViewHandleNVX;
ProcGetImageViewOpaqueCaptureDescriptorDataEXT             getImageViewOpaqueCaptureDescriptorDataEXT;
ProcGetLatencyTimingsNV                                    getLatencyTimingsNV;
ProcGetMemoryFdKHR                                         getMemoryFdKHR;
ProcGetMemoryFdPropertiesKHR                               getMemoryFdPropertiesKHR;
ProcGetMemoryHostPointerPropertiesEXT                      getMemoryHostPointerPropertiesEXT;
ProcGetMemoryMetalHandleEXT                                getMemoryMetalHandleEXT;
ProcGetMemoryMetalHandlePropertiesEXT                      getMemoryMetalHandlePropertiesEXT;
ProcGetMemoryRemoteAddressNV                               getMemoryRemoteAddressNV;
ProcGetMemoryWin32HandleKHR                                getMemoryWin32HandleKHR;
ProcGetMemoryWin32HandleNV                                 getMemoryWin32HandleNV;
ProcGetMemoryWin32HandlePropertiesKHR                      getMemoryWin32HandlePropertiesKHR;
ProcGetMicromapBuildSizesEXT                               getMicromapBuildSizesEXT;
ProcGetPartitionedAccelerationStructuresBuildSizesNV       getPartitionedAccelerationStructuresBuildSizesNV;
ProcGetPastPresentationTimingGOOGLE                        getPastPresentationTimingGOOGLE;
ProcGetPerformanceParameterINTEL                           getPerformanceParameterINTEL;
ProcGetPipelineBinaryDataKHR                               getPipelineBinaryDataKHR;
ProcGetPipelineCacheData                                   getPipelineCacheData;
ProcGetPipelineExecutableInternalRepresentationsKHR        getPipelineExecutableInternalRepresentationsKHR;
ProcGetPipelineExecutablePropertiesKHR                     getPipelineExecutablePropertiesKHR;
ProcGetPipelineExecutableStatisticsKHR                     getPipelineExecutableStatisticsKHR;
ProcGetPipelineIndirectDeviceAddressNV                     getPipelineIndirectDeviceAddressNV;
ProcGetPipelineIndirectMemoryRequirementsNV                getPipelineIndirectMemoryRequirementsNV;
ProcGetPipelineKeyKHR                                      getPipelineKeyKHR;
ProcGetPipelinePropertiesEXT                               getPipelinePropertiesEXT;
ProcGetPrivateData                                         getPrivateData;
ProcGetPrivateDataEXT                                      getPrivateDataEXT;
ProcGetQueryPoolResults                                    getQueryPoolResults;
ProcGetQueueCheckpointData2NV                              getQueueCheckpointData2NV;
ProcGetQueueCheckpointDataNV                               getQueueCheckpointDataNV;
ProcGetRayTracingCaptureReplayShaderGroupHandlesKHR        getRayTracingCaptureReplayShaderGroupHandlesKHR;
ProcGetRayTracingShaderGroupHandlesKHR                     getRayTracingShaderGroupHandlesKHR;
ProcGetRayTracingShaderGroupHandlesNV                      getRayTracingShaderGroupHandlesNV;
ProcGetRayTracingShaderGroupStackSizeKHR                   getRayTracingShaderGroupStackSizeKHR;
ProcGetRefreshCycleDurationGOOGLE                          getRefreshCycleDurationGOOGLE;
ProcGetRenderAreaGranularity                               getRenderAreaGranularity;
ProcGetRenderingAreaGranularity                            getRenderingAreaGranularity;
ProcGetRenderingAreaGranularityKHR                         getRenderingAreaGranularityKHR;
ProcGetSamplerOpaqueCaptureDescriptorDataEXT               getSamplerOpaqueCaptureDescriptorDataEXT;
ProcGetSemaphoreCounterValue                               getSemaphoreCounterValue;
ProcGetSemaphoreCounterValueKHR                            getSemaphoreCounterValueKHR;
ProcGetSemaphoreFdKHR                                      getSemaphoreFdKHR;
ProcGetSemaphoreWin32HandleKHR                             getSemaphoreWin32HandleKHR;
ProcGetShaderBinaryDataEXT                                 getShaderBinaryDataEXT;
ProcGetShaderInfoAMD                                       getShaderInfoAMD;
ProcGetShaderModuleCreateInfoIdentifierEXT                 getShaderModuleCreateInfoIdentifierEXT;
ProcGetShaderModuleIdentifierEXT                           getShaderModuleIdentifierEXT;
ProcGetSwapchainCounterEXT                                 getSwapchainCounterEXT;
ProcGetSwapchainImagesKHR                                  getSwapchainImagesKHR;
ProcGetSwapchainStatusKHR                                  getSwapchainStatusKHR;
ProcGetValidationCacheDataEXT                              getValidationCacheDataEXT;
ProcGetVideoSessionMemoryRequirementsKHR                   getVideoSessionMemoryRequirementsKHR;
ProcImportFenceFdKHR                                       importFenceFdKHR;
ProcImportFenceWin32HandleKHR                              importFenceWin32HandleKHR;
ProcImportSemaphoreFdKHR                                   importSemaphoreFdKHR;
ProcImportSemaphoreWin32HandleKHR                          importSemaphoreWin32HandleKHR;
ProcInitializePerformanceApiINTEL                          initializePerformanceApiINTEL;
ProcInvalidateMappedMemoryRanges                           invalidateMappedMemoryRanges;
ProcLatencySleepNV                                         latencySleepNV;
ProcMapMemory                                              mapMemory;
ProcMapMemory2                                             mapMemory2;
ProcMapMemory2KHR                                          mapMemory2KHR;
ProcMergePipelineCaches                                    mergePipelineCaches;
ProcMergeValidationCachesEXT                               mergeValidationCachesEXT;
ProcQueueBeginDebugUtilsLabelEXT                           queueBeginDebugUtilsLabelEXT;
ProcQueueBindSparse                                        queueBindSparse;
ProcQueueEndDebugUtilsLabelEXT                             queueEndDebugUtilsLabelEXT;
ProcQueueInsertDebugUtilsLabelEXT                          queueInsertDebugUtilsLabelEXT;
ProcQueueNotifyOutOfBandNV                                 queueNotifyOutOfBandNV;
ProcQueuePresentKHR                                        queuePresentKHR;
ProcQueueSetPerformanceConfigurationINTEL                  queueSetPerformanceConfigurationINTEL;
ProcQueueSubmit                                            queueSubmit;
ProcQueueSubmit2                                           queueSubmit2;
ProcQueueSubmit2KHR                                        queueSubmit2KHR;
ProcQueueWaitIdle                                          queueWaitIdle;
ProcRegisterDeviceEventEXT                                 registerDeviceEventEXT;
ProcRegisterDisplayEventEXT                                registerDisplayEventEXT;
ProcReleaseCapturedPipelineDataKHR                         releaseCapturedPipelineDataKHR;
ProcReleaseFullScreenExclusiveModeEXT                      releaseFullScreenExclusiveModeEXT;
ProcReleasePerformanceConfigurationINTEL                   releasePerformanceConfigurationINTEL;
ProcReleaseProfilingLockKHR                                releaseProfilingLockKHR;
ProcReleaseSwapchainImagesEXT                              releaseSwapchainImagesEXT;
ProcResetCommandBuffer                                     resetCommandBuffer;
ProcResetCommandPool                                       resetCommandPool;
ProcResetDescriptorPool                                    resetDescriptorPool;
ProcResetEvent                                             resetEvent;
ProcResetFences                                            resetFences;
ProcResetQueryPool                                         resetQueryPool;
ProcResetQueryPoolEXT                                      resetQueryPoolEXT;
ProcSetDebugUtilsObjectNameEXT                             setDebugUtilsObjectNameEXT;
ProcSetDebugUtilsObjectTagEXT                              setDebugUtilsObjectTagEXT;
ProcSetDeviceMemoryPriorityEXT                             setDeviceMemoryPriorityEXT;
ProcSetEvent                                               setEvent;
ProcSetHdrMetadataEXT                                      setHdrMetadataEXT;
ProcSetLatencyMarkerNV                                     setLatencyMarkerNV;
ProcSetLatencySleepModeNV                                  setLatencySleepModeNV;
ProcSetLocalDimmingAMD                                     setLocalDimmingAMD;
ProcSetPrivateData                                         setPrivateData;
ProcSetPrivateDataEXT                                      setPrivateDataEXT;
ProcSignalSemaphore                                        signalSemaphore;
ProcSignalSemaphoreKHR                                     signalSemaphoreKHR;
ProcTransitionImageLayout                                  transitionImageLayout;
ProcTransitionImageLayoutEXT                               transitionImageLayoutEXT;
ProcTrimCommandPool                                        trimCommandPool;
ProcTrimCommandPoolKHR                                     trimCommandPoolKHR;
ProcUninitializePerformanceApiINTEL                        uninitializePerformanceApiINTEL;
ProcUnmapMemory                                            unmapMemory;
ProcUnmapMemory2                                           unmapMemory2;
ProcUnmapMemory2KHR                                        unmapMemory2KHR;
ProcUpdateDescriptorSetWithTemplate                        updateDescriptorSetWithTemplate;
ProcUpdateDescriptorSetWithTemplateKHR                     updateDescriptorSetWithTemplateKHR;
ProcUpdateDescriptorSets                                   updateDescriptorSets;
ProcUpdateIndirectExecutionSetPipelineEXT                  updateIndirectExecutionSetPipelineEXT;
ProcUpdateIndirectExecutionSetShaderEXT                    updateIndirectExecutionSetShaderEXT;
ProcUpdateVideoSessionParametersKHR                        updateVideoSessionParametersKHR;
ProcWaitForFences                                          waitForFences;
ProcWaitForPresentKHR                                      waitForPresentKHR;
ProcWaitSemaphores                                         waitSemaphores;
ProcWaitSemaphoresKHR                                      waitSemaphoresKHR;
ProcWriteAccelerationStructuresPropertiesKHR               writeAccelerationStructuresPropertiesKHR;
ProcWriteMicromapsPropertiesEXT                            writeMicromapsPropertiesEXT;
