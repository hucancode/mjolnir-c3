module stb;
import libc;

const int STBI_VERSION = 1;
const int DEFAULT    = 0;
const int GREY       = 1;
const int GREY_ALPHA = 2;
const int RGB        = 3;
const int RGB_ALPHA  = 4;

def ProcRead = fn int(void* user, char* data, int size);
def ProcSkip = fn void(void* user, int n);
def ProcEof = fn int(void* user);
struct IOCallbacks {
    ProcRead read;
    ProcSkip skip;
    ProcEof eof;
}

fn char *load_from_memory(char* buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);
fn char *load_from_callbacks(IOCallbacks *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels);

fn char *load            (ZString filename, int *x, int *y, int *channels_in_file, int desired_channels);
fn char *load_from_file  (CFile f, int *x, int *y, int *channels_in_file, int desired_channels);

fn int convert_wchar_to_utf8 (char *buffer, usz bufferlen, short* input) @if($defined(STBI_WINDOWS_UTF8));

fn ushort *load_16_from_memory   (char *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);
fn ushort *load_16_from_callbacks(IOCallbacks *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels);

fn ushort *load_16          (ZString filename, int *x, int *y, int *channels_in_file, int desired_channels);
fn ushort *load_from_file_16(CFile f, int *x, int *y, int *channels_in_file, int desired_channels);

fn float *loadf_from_memory     (char *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels) @if(!$defined(STBI_NO_LINEAR));
fn float *loadf_from_callbacks  (IOCallbacks *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels) @if(!$defined(STBI_NO_LINEAR));

fn float *loadf            (ZString filename, int *x, int *y, int *channels_in_file, int desired_channels) @if(!$defined(STBI_NO_LINEAR));
fn float *loadf_from_file  (CFile f, int *x, int *y, int *channels_in_file, int desired_channels) @if(!$defined(STBI_NO_LINEAR));

fn void   hdr_to_ldr_gamma(float gamma) @if(!$defined(STBI_NO_HDR));
fn void   hdr_to_ldr_scale(float scale) @if(!$defined(STBI_NO_HDR));

fn void   stbi_ldr_to_hdr_gamma(float gamma) @if(!$defined(STBI_NO_LINEAR));
fn void   stbi_ldr_to_hdr_scale(float scale) @if(!$defined(STBI_NO_LINEAR));

fn int    is_hdr_from_callbacks(IOCallbacks *clbk, void *user);
fn int    is_hdr_from_memory(char *buffer, int len);
fn int    is_hdr          (ZString filename);
fn int    is_hdr_from_file(CFile f);

fn ZString stbi_failure_reason();

fn void     stbi_image_free      (void *retval_from_stbi_load);

fn int      stbi_info_from_memory(char *buffer, int len, int *x, int *y, int *comp);
fn int      stbi_info_from_callbacks(IOCallbacks *clbk, void *user, int *x, int *y, int *comp);
fn int      stbi_is_16_bit_from_memory(char *buffer, int len);
fn int      stbi_is_16_bit_from_callbacks(IOCallbacks *clbk, void *user);

fn int      stbi_info               (ZString filename,     int *x, int *y, int *comp);
fn int      stbi_info_from_file     (CFile f,              int *x, int *y, int *comp);
fn int      stbi_is_16_bit          (ZString filename);
fn int      stbi_is_16_bit_from_file(CFile f);

fn void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply);

fn void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert);

fn void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip);

fn void stbi_set_unpremultiply_on_load_thread(int flag_true_if_should_unpremultiply);
fn void stbi_convert_iphone_png_to_rgb_thread(int flag_true_if_should_convert);
fn void stbi_set_flip_vertically_on_load_thread(int flag_true_if_should_flip);


fn char *stbi_zlib_decode_malloc_guesssize(char *buffer, int len, int initial_size, int *outlen);
fn char *stbi_zlib_decode_malloc_guesssize_headerflag(char *buffer, int len, int initial_size, int *outlen, int parse_header);
fn char *stbi_zlib_decode_malloc(char *buffer, int len, int *outlen);
fn int   stbi_zlib_decode_buffer(char *obuffer, int olen, char *ibuffer, int ilen);

fn char *stbi_zlib_decode_noheader_malloc(char *buffer, int len, int *outlen);
fn int   stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, char *ibuffer, int ilen);
